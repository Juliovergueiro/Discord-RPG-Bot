if(inicio_comando == "GFICHARE"){

      let nome_personagem = msg.content.split(" ")
      nome_personagem = nome_personagem.splice(1, 5)
      nome_personagem = nome_personagem.join(" ")

      db.get("usuarios")
      .push({
      id_membro: msg.member.id,
      Nome: `${nome_personagem}`,
      Sobrenome: null,
      Foto: null,
      Pts_Atributo: 0,
      PBalas: 0,
      SBalas: 0,
      MBalas: 0,
      MP: 0,
      MS: 0,
      MM: 0,
      ArmaFogo: 0,
      ArmaCadencia: 0,
      ArmaPrecisao: 0,
      ArmaMediaD: 0,
      ArmaCurtaD: 0,
      ArmaQueimaD: 0
})
.write()

msg.reply(`*Ficha gerada, digita 'check', sem as aspas, pra ver11!!*`)
}

if(inicio_comando == "GFICHANOT"){

// q n loga automatico, mas é o msm comando p tudo menos id membro

      let nome_personagem = msg.content.split(" ")
      nome_personagem = nome_personagem.splice(1, 5)
      nome_personagem = nome_personagem.join(" ")

      db.get("usuarios")
      .push({
      id_membro: null,
      Nome: `${nome_personagem}`,
      Sobrenome: null,
      Foto: null,
      Pts_Atributo: 0,
      MP: 0,
      MS: 0,
      MM: 0
      })
      .write()

      msg.reply(`*Ficha gerada, digita 'check', sem as aspas, pra ver11!!*`)
}

if(inicio_comando == "GFICHAOLD"){

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(1, 5)
nome_personagem = nome_personagem.join(" ")

db.get("usuarios")
.push({
id_membro: msg.member.id, Nome: `${nome_personagem}`, Sobrenome: null, Foto: null,
Pts_Atributo: 0,
XP: null,
XP_Drop: 0,
Vig: 0,
Des: 0,
Agi: 0,
Car: 0,
Int: 0,
Von: 0,
Max_HP: 0,
HP: 0,
Max_SP: 0,
SP: 0,
Max_MP: 0,
MP: 0,
Dado: "1d20",
DFA: "120",
DFD: "120",
DFE: "120",
DDE: "120",
DAC: "120",
DES: "120",
DIN: "120",
AtHP: 0,
AtMP: 0,
AtSP: 0,
AtFA: 0,
AtFD: 0,
AtFE: 0,
AtDE: 0,
AtAC: 0,
AtES: 0,
AtIN: 0,
AtAR: 0,
AtLT: 0,
AtFur: 0,
AtPer: 0,

ATRgen: 0, ATRcup: 0, ATPen: 0, ATRes: 0,

FA: 0, FD: 0, FE: 0, DE: 0,

AC: 0, ES: 0, IN: 0, AR: 0, LT: 0, Fur: 0, Per: 0,
Rgen: 0,
Rcup: 0,
Pen: 0,
Res: 0,
Ataque: "N",
AtkM: "N",
AtkES: "N",
DefES: "N"
})
.write()

msg.reply(`*Ficha gerada, digita 'check', sem as aspas, pra ver11!!*`)
}

if(inicio_comando == "FUR"){

// vai encontrar ou se esconder do personagem, serve pros dois ja q eh so 1 dado

    let nome_personagem = msg.content.split(" ")
    nome_personagem = nome_personagem.splice(1, 5)
    nome_personagem = nome_personagem.join(" ")

    let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
    let id_member = msg.member.id
    let atacante = personagem_logado(id_member)
    let dado_fur = rollDice20()
    let dado_per = rollDice20()
    let ModsPer = 0 + defensor.FurTecnica
    let ModsFur = 0 + atacante.FurTecnica
    let furtividade = atacante.Fur + ModsFur + dado_fur - defensor.Fur - ModsPer - dado_per

    if(defensor.Arena == "Nevoa"){
    ModsPer -= 2
    }

    if(defensor.Tatico == "S"){
    furtividade -= 4
    }

if(dado_fur >= 20){
furtividade += 100
msg.reply(`**Crit**!`)
}

if(dado_per >= 20){
furtividade -= 100
msg.reply(`**Crit**!`)
}

    if(furtividade > 0 ){
    atacante.Furtivo = "S"
    msg.reply(`**${atacante.Nome}** conseguiu ficar **Furtivo** contra **${defensor.Nome}**.

    Furtividade: ${atacante.Fur} + **${dado_fur}** Vs. **${dado_per}** + ${defensor.Fur}`)
    msg.delete()
    }
    else{
    atacante.Furtivo = "N"
    let custo = 0 + atacante.MP_Ativacao
    atacante.MP -= custo
    atacante.HP -= atacante.HP_Ativacao
    msg.reply(`**${defensor.nome}** percebeu **${atacante.nome}**.

    Percepção: ${defensor.Fur} + **${dado_per}** Vs. **${dado_fur}** + ${atacante.Fur}`)
    msg.delete()
    }

    db.write()
}
if(inicio_comando == "ATKFUR"){

// vai encontrar ou se esconder do personagem, serve pros dois ja q eh so 1 dado

    let nome_personagem = msg.content.split(" ")
    nome_personagem = nome_personagem.splice(1, 5)
    nome_personagem = nome_personagem.join(" ")

    let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
    let id_member = msg.member.id
    let atacante = personagem_logado(id_member)
    let dado_fur = rollDice20()
    let dado_per = rollDice20()
    let ModsPer = 0 + defensor.FurTecnica
    let ModsFur = 0 + atacante.FurTecnica
    let furtividade = atacante.Fur + ModsFur + dado_fur - defensor.Fur - ModsPer - dado_per

    if(defensor.Arena == "Nevoa"){
    ModsPer -= 2
    }

    if(defensor.Tatico == "S"){
    furtividade -= 4
    }

if(dado_fur >= 20){
furtividade += 100
msg.reply(`**Crit**!`)
}

if(dado_per >= 20){
furtividade -= 100
msg.reply(`**Crit**!`)
}

    if(furtividade > 0 ){
    atacante.AtkFurtivo = "S"
    msg.reply(`**${atacante.Nome}** conseguiu ficar **Furtivo** contra **${defensor.Nome}**.

    Furtividade: ${atacante.Fur} + **${dado_fur}** Vs. **${dado_per}** + ${defensor.Fur}`)
    msg.delete()
    }
    else{
    atacante.AtkFurtivo = "N"
    let custo = 0 + atacante.MP_Ativacao
    atacante.MP -= custo
    atacante.HP -= atacante.HP_Ativacao
    msg.reply(`**${defensor.nome}** percebeu **${atacante.nome}**.

    Percepção: ${defensor.Fur} + **${dado_per}** Vs. **${dado_fur}** + ${atacante.Fur}`)
    msg.delete()
    }

    db.write()
}
if(inicio_comando == "PER"){

  // vai encontrar ou se esconder do personagem, serve pros dois ja q eh so 1 dado

      let nome_personagem = msg.content.split(" ")
      nome_personagem = nome_personagem.splice(1, 5)
      nome_personagem = nome_personagem.join(" ")

      let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
      let id_member = msg.member.id
      let atacante = personagem_logado(id_member)
      let ModsPer = 0 + defensor.FurTecnica
      let ModsFur = 0 + atacante.FurTecnica
      let dado_fur = rollDice20()
      let dado_per = rollDice20()
      let percepcao = atacante.Fur + ModsPer + dado_per - defensor.Fur - ModsFur - dado_fur

  if(percepcao >= 0 ){
      defensor.Furtivo = "N"
      defensor.AtkFurtivo = "N"
      defensor.Disfarce = "N"
msg.reply(`**${atacante.Nome}** percebeu **${defensor.Nome}**.

Percepção: ${atacante.Fur} + **${dado_per}** Vs. **${dado_fur}** + ${defensor.Fur}`)
msg.delete()
  }
  else{
msg.reply(`**${defensor.Nome}** conseguiu continuar furtivo contra **${atacante.Nome}**.

Furtividade: ${defensor.Fur} + **${dado_fur}** Vs. **${dado_per}** + ${atacante.Fur}`)
msg.delete()
  }

// talvez no futuro fazer q if disfarce == s, tem uma margem onde tu pd perceber falsamente

db.write()
}
if(inicio_comando == "INI"){

  let nome_personagem = msg.content.split(" ")
  nome_personagem = nome_personagem.splice(1, 5)
  nome_personagem = nome_personagem.join(" ")

  let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
  let id_member = msg.member.id
  let atacante = personagem_logado(id_member)
  let dado_iniatk = rollDice1d20()
  let dado_inidef = rollDice1d20()
  let iniciativa = atacante.Ini + dado_iniatk - defensor.Ini - dado_inidef

  if(iniciativa < 0 ){

  msg.reply(`a Iniciativa foi jogada e ${defensor.Nome} ganhou.

  Iniciativa do ${atacante.Nome}: ${atacante.Ini} + **${dado_iniatk}**

  Iniciativa do ${defensor.Nome}: ${defensor.Ini} + **${dado_inidef}**`)}
  else{
  msg.reply(`a Iniciativa foi jogada e ${atacante.Nome} ganhou.

  Iniciativa do ${atacante.Nome}: ${atacante.Ini} + **${dado_iniatk}**

  Iniciativa do ${defensor.Nome}: ${defensor.Ini} + **${dado_inidef}**`)
  }
}
if(inicio_comando == "CURA"){

  let nome_personagem = msg.content.split(" ")
  nome_personagem = nome_personagem.splice(1, 5)
  nome_personagem = nome_personagem.join(" ")

  let id_member = msg.member.id
  let char = db.get("usuarios").find({Nome : nome_personagem}).value()

  char.MP = char.Max_MP
  char.HP = char.Max_HP
  char.Coxa = 0
  db.write()

/*  char.mp += 10
  char.CocaCola -= 1
  db.write() */

  msg.reply(`**${char.Nome}** curadinho ^^`)
}
if(inicio_comando == "DESCANSO"){

  let nome_personagem = msg.content.split(" ")
  nome_personagem = nome_personagem.splice(1, 5)
  nome_personagem = nome_personagem.join(" ")

  let id_member = msg.member.id
  let char = personagem_logado(id_member)

  let CuraHP = rollDice1d10()
  let CuraSP = rollDice1d4()

  char.SP += CuraSP
  char.HP += CuraHP
  db.write()

  msg.reply(`***${char.Nome}** descansou.*

  *HP:* ***${char.HP}***
  *SP:* ***${char.SP}***
  *MP:* ***${char.MP}***`)
}
if(inicio_comando == "EQUIP"){

  let nome_personagem = msg.content.split(" ")
  nome_personagem = nome_personagem.splice(1, 5)
  nome_personagem = nome_personagem.join(" ")

  let id_member = msg.member.id
  let char = personagem_logado(id_member)

// Armas

if(nome_personagem == "Desarmado"){
char.EffFA = 1.1
char.EffFD = 1.0
char.EffFE = 1.0
char.EffDE = 1.0
char.EffAC = 0.9
char.EffES = 1.2
char.EffIN = 1.2
char.EffLE = 0.5
char.EffAR = 0.8
char.EffFU = 1.0
char.EffPE = 1.0
char.Arma = "Desarmado"
char.Alcance = "Curto"
db.write()

msg.reply(`***${char.Nome}*** *equipou* ***Desarmado.***`)
}

if(nome_personagem == "Katana"){
char.EffFA = 0.9
char.EffFD = 0.7
char.EffFE = 1.0
char.EffDE = 1.0
char.EffAC = 1.2
char.EffES = 1.0
char.EffIN = 1.0
char.EffLE = 1.1
char.EffAR = 1.1
char.EffFU = 1.0
char.EffPE = 1.0
char.Arma = "Katana"
char.Alcance = "Médio"
db.write()

msg.reply(`***${char.Nome}*** *equipou* ***Katana.***`)
}

if(nome_personagem == "Glock"){
char.EffFA = 1.0
char.EffFD = 0.5
char.EffFE = 1.0
char.EffDE = 1.0
char.EffAC = 1.4
char.EffES = 1.0
char.EffIN = 1.0
char.EffLE = 1.4
char.EffAR = 0.5
char.EffFU = 1.0
char.EffPE = 1.0
char.Arma = "Glock"
db.write()

msg.reply(`***${char.Nome}*** *equipou* ***Glock.***`)
}

if(nome_personagem == "Bastao"){
char.EffFA = 1.0
char.EffFD = 1.2
char.EffFE = 1.0
char.EffDE = 1.0
char.EffAC = 1.1
char.EffES = 1.0
char.EffIN = 1.0
char.EffLE = 0.8
char.EffAR = 1.0
char.EffFU = 1.0
char.EffPE = 1.0
char.Arma = "Bastao"
db.write()

msg.reply(`***${char.Nome}*** *equipou* ***Bastão.***`)
}
// Armaduras

}
if(inicio_comando == "CORRER"){

// cria leitura de 'aproximar' e 'afastar' aqui

}
if(inicio_comando == "APROX"){

      let nome_personagem = msg.content.split(" ")
      nome_personagem = nome_personagem.splice(1, 5)
      nome_personagem = nome_personagem.join(" ")

      let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
      let id_member = msg.member.id
      let atacante = personagem_logado(id_member)
      let dado_fuga = rollDice1d10()
      let dado_manterdistancia = rollDice1d10()
      let afastar = atacante.Ini + dado_fuga - defensor.Ini - dado_manterdistancia

let FalhaCritica = ""

if(afastar <= -5){
FalhaCritica = `***${defensor.Nome}*** *foi deixado pra trás com facilidade e* ***${atacante.Nome}*** *ganhou um Ataque de Oportunidade*.`
}

  if(afastar > 0){
msg.reply(`***${atacante.Nome}*** *se aproximou em* ***${afastar} Metros***.

**${dado_fuga}** x. **${dado_manterdistancia}** ||*Fuga:* **${atacante.Ini}**, *Aproximação:* **${defensor.Ini}**||

||***Regras de Distância:*** *0-1m = Curta, 1-3m = Média, 4m+ = Longa*||
`)} else{
msg.reply(`***${defensor.Nome}*** *manteve a distância contra* ***${atacante.Nome}***.

**${dado_manterdistancia}** x. **${dado_fuga}** ||*Fuga:* **${atacante.Ini}**, *Aproximação:* **${defensor.Ini}**||

||***Regras de Distância:*** *0-1m = Curta, 1-3m = Média, 4m+ = Longa*||

${FalhaCritica}`)
msg.delete()
}
}
if(inicio_comando == "AFAST"){

      let nome_personagem = msg.content.split(" ")
      nome_personagem = nome_personagem.splice(1, 5)
      nome_personagem = nome_personagem.join(" ")

      let defensor = db.get("usuarios").find({Nome : nome_personagem}).value()
      let id_member = msg.member.id
      let atacante = personagem_logado(id_member)
      let dado_fuga = rollDice1d10()
      let dado_manterdistancia = rollDice1d10()
      let afastar = atacante.Ini + dado_fuga - defensor.Ini - dado_manterdistancia

let FalhaCritica = ""

if(afastar <= -5){
FalhaCritica = `***${defensor.Nome}*** *foi surpreendido e* ***${atacante.Nome}*** *ganhou um Ataque de Oportunidade*.`
}

  if(afastar > 0){
msg.reply(`***${atacante.Nome}*** *se afastou em* ***${afastar} Metros***.

**${dado_fuga}** x. **${dado_manterdistancia}** ||*Fuga:* **${atacante.Ini}**, *Aproximação:* **${defensor.Ini}**||

||***Regras de Distância:*** *0-1m = Curta, 1-3m = Média, 4m+ = Longa*||
`)} else{
msg.reply(`***${defensor.Nome}*** *manteve a distância contra* ***${atacante.Nome}***.

**${dado_manterdistancia}** x. **${dado_fuga}** ||*Fuga:* **${atacante.Ini}**, *Aproximação:* **${defensor.Ini}**||

||***Regras de Distância:*** *0-1m = Curta, 1-3m = Média, 4m+ = Longa*||

${FalhaCritica}`)
msg.delete()
}
}
if(inicio_comando == "DIST"){

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(1, 5)
nome_personagem = nome_personagem.join(" ")

let id_member = msg.member.id
let char = personagem_logado(id_member)

if(nome_personagem == "QR"){
      char.Dist = "QM"
      db.write()
}

if(nome_personagem == "C"){
      char.Dist = "C"
      db.write()
}

if(nome_personagem == "L"){
      char.Dist = "L"
      db.write()
}

if(nome_personagem == "ML"){
char.Dist = "ML"
db.write()
}

}
if(inicio_comando == "MIRA"){

    let nome_personagem = msg.content.split(" ")
    nome_personagem = nome_personagem.splice(1, 5)
    nome_personagem = nome_personagem.join(" ")

    let id_member = msg.member.id
    let char = personagem_logado(id_member)

if(nome_personagem == "Rosto"){
char.Ataque = "Rosto"
msg.reply(`**${char.Nome}** vai mirar o **Rosto.**`)
msg.delete()
db.write()
}

if(nome_personagem == "Corpo"){
char.Ataque = "Corpo"
msg.reply(`**${char.Nome}** vai mirar o **Corpo.**`)
msg.delete()
db.write()
}

if(nome_personagem == "Braço"){
char.Ataque = "Braço"
msg.reply(`**${char.Nome}** vai mirar o **Braço**.`)
msg.delete()
db.write()
}

if(nome_personagem == "Perna"){
char.Ataque = "Perna"
msg.reply(`**${char.Nome}** vai mirar a **Perna**.`)
msg.delete()
db.write()
}

}

if(Atacante.SP <= -1){

Atacante.Fadigado = "S"

QuaseFadigadoCheckAtk = `**${Atacante.Nome}** tá **Fadigado**. `

}

if(Defensor.SP <= -1){

Defensor.Fadigado = "S"

QuaseFadigadoCheckDef = `**${Defensor.Nome}** tá **Fadigado**.`

}

if(inicio_comando == "M"){

// Vai capitalizar todas as letras escritas no meiocomando, se tiver um if precisa ter a condição toda em maiusculo, igual inicio_comando

let quasemeiocomando = msg.content.split(" ")[1]

let meiocomando = msg.content.toUpperCase().split(" ")[2]

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(3, 5)
nome_personagem = nome_personagem.join(" ")
nome_personagem = parseInt(nome_personagem)

let id_member = msg.member.id
let Char = personagem_logado(id_member)

if(quasemeiocomando == "+" && meiocomando == "FA"){
Char.Fa += nome_personagem
db.write()
}

if(quasemeiocomando == "-" && meiocomando == "FA"){
Char.Fa -= nome_personagem
db.write()
}

if(quasemeiocomando == "+" && meiocomando == "MP"){
Char.Mp += nome_personagem
db.write()
}

if(quasemeiocomando == "-" && meiocomando == "MP"){
Char.Mp -= nome_personagem
db.write()
}

if(meiocomando == "VIG"){
Char.Vig = nome_personagem
db.write()
}

if(meiocomando == "DES"){
Char.Des = nome_personagem
db.write()
}

if(meiocomando == "AGI"){
Char.Agi = nome_personagem
db.write()
}

if(meiocomando == "CAR"){
Char.Car = nome_personagem
db.write()
}

if(meiocomando == "INT"){
Char.Int = nome_personagem
db.write()
}

if(meiocomando == "VON"){
Char.Von = nome_personagem
db.write()
}

msg.channel.send(`**+${nome_personagem}** de **${meiocomando}**.`)

}

// let ValorAR = Armadura*0.1

// let ReducaoArmadura = DanoAcerto

// ReducaoArmadura *= ValorAR

// DanoLetalidade -= Math.floor(ReducaoArmadura)

// let DanoAcerto = Math.floor(SucessoAcerto*Letalidade)

// let ReducaoArmadura = DanoAcerto

// ReducaoArmadura *= Defensor.AR

// DanoAcerto -= Math.floor(ReducaoArmadura)

// TesteDano += DanoAcerto

      "ARCorpo": 0,
      "ARNuca": 0,
      "AROlho": 0,
      "ARRosto": 0,
      "ARPescoco": 0,
      "ARBracos": 0,
      "ARPeito": 0,
      "ARAbdomem": 0,
      "ARCostas": 0,
      "ARPernas": 0,

/* if(Atacante.Mira == "Braco" && Defensor.Reacao == "Bloqueio"){

Acerto += 2

} */

/* if(Atacante.Mira == "Mao" && Defensor.Reacao == "Aparar" || Defensor.Reacao == "Bloqueio"){

Acerto += 1

} */

rpgBot.on('message',msg=>{
let inicio_comando = msg.content.toUpperCase().split(" ")[0]
if(inicio_comando == "ACOES"){

msg.channel.send(
`__Areas__

川川***  Rosto***

Cmd: Area Rosto — Dano: +2 — Ac: -2


川川***  Braço***

Cmd: Area Branco — Dano: -2 — Ac: +2


川川***  Tronco***

Cmd: Area Tronco — Dano: +0


川川***  Perna***

Cmd: Area Perna — Dano: -3 — Ac: +3


川川***  Nuca***

Cmd: Area Nuca — Dano: +6 — Ac: -3

__Effs.:__ Precisa de Flanco. Perigoso [0.5].


川川***  Costas***

Cmd: Area Rosto — Dano: +1

__Effs.:__ Precisa de Flanco. Incapacitante [2x].

**—————————————————————————————————————————————————————————————————————————————————————————**

__Limbs__

川川***  Punho***

Cmd: LI Punho — Custo: 01 — Dano: 1d10 — Acerto: 1d20

__Effs.:__ -


川川***  Palma***

Cmd: LI Palma — Custo: 01 — Dano: 1d8; -1 — Acerto: 1d20; +1

__Effs.:__ recuo rapido, atordoa + facil?


川川***  Cotovelo***

Cmd: LI Cotovelo — Custo: 01 — Dano: 1d20; +2 — Acerto: 1d20; -2 — Letalidade: +2 — Penetração: +5


__Effs.:__ -


川川***  Perna***

Cmd: LI Perna — Custo: 02 — Dano: 1d10; +2 — Acerto: 1d20; -1

__Effs.:__ recuo lento (sofre mt contra reaçoes positivas, mt facil agarrar perna e tal)


川川***  Joelho***

Cmd: LI Joelho — Custo: 02 — Dano: 1d12; +4 — Ac: 1d20; -3

__Effs.:__ recuo lento

**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`__Angulo de Ataque__

川川***  Frontal***

Cmd: ANG Fron — Custo: 00

__Effs.:__ +2 contra Counter Attack.


川川***  Horizontal***

Cmd: ANG Hori — Custo: 00

__Effs.:__ +2 contra Block.


川川***  Diagonal***

Cmd: ANG Diago — Custo: 00

__Effs.:__ +2 contra Dodge.


川川***  Vertical***

Cmd: ANG Joelho — Custo: 00

__Effs.:__ +2 contra Aparar.

`)

msg.channel.send(
`__Ataques Especiais¹__

川川***  Compact Attack***

Cmd: AE Comp — Custo: 00 — Dano: 1d8 ; -2

__Effs.:__ +3 contra Contra Ataque. (eff compacto se pa)


川川***  Strong Attack***

Cmd: AE Comp — Custo: 00 — Dano: +2 — Ac: -2

__Effs.:__ Efeito Crítico no Dano Causado*. (um eff pra isso se pa)

* Não é o resultado, é o quanto de dano você causou depois de todas as subtrações de defesa.


川川***  Fast Attack***

Cmd: AE Comp — Custo: 00 — Dano: +2 — Ac: -2

__Effs.:__ 2d12 ac, +vantagem de iniciativa de dano (um eff pra isso de ganhar dano com velocidade se pa), custo 2


Sneak Precisa estar Furtivo. Roda 1d20 + Fur x 1d20 + Per.

Sucesso: A esquiva do defensor é 0 e ele não pode rolar dados de Esquiva. Não existe Vantagem de Iniciativa nesse seu ataque.

Falha: O defensor pode defender normalmente e é rolado um segundo teste de Fur x Per pra definir Vantagem de Ação. Nesse ataque é lida a Vantagem de Iniciativa.

Crippling Custo: 01 — Tipo: Ataque Especial — Dano: 1d20; -1 — Acerto: 1d20; -1 — Letalidade: +1 — Penetração: +0

Effs.: Incapacitante [0.5x].


**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`
**__Ações Especiais¹__

Açoes Multiplas

Açoes de Oportunidade

Ataques de Oportunidade são ataques comuns, mas que não são contados para ataques múltiplos (não importa quando, mesmo que você esteja no meio de um) e não podem ser contra-atacados.

Açao Surpresa

Resistencia Nata É quando a contagem de dano vale pra antes da redução da resistência. Se o alvo tem 13 de Res e você ia causar 14 mas foi reduzido pra 7, então você venceu a Resistência nata dele.

Flanking (Flanquear, a açao esp) Flank (Flanco, o efeito) é usado com movimentação, em um esquema junto com aproximar ou afastar Joga IN + Fur - 2 x. IN + Per.

Sucesso: +1 de Vantagem de Ação pra cada 1 de Resultado Positivo. Ganha "Flanking".

Jump +3 Iniciativa. airbone, reposicionar

Telegraph Telegrafado [-3]


Arremesso - o dano é baseado em qnts metros percorridos

Desarmar


Adrenalina - gastar 5 de sp em um espaço de 2 açoes concede 1 de adrenalina. adrenalina da +1 de res e in, mas se passar um espaço de duas açoes sem gastar 5 de sp, perde 1 de adrenalina e a quantia de adrenalina que tinha de SP


Evasivo

tipo estrategia


Acelerar

tipo estrategia

**—————————————————————————————————————————————————————————————————————————————————————————**`)
}

})

rpgBot.on('message',msg=>{
let inicio_comando = msg.content.toUpperCase().split(" ")[0]
if(inicio_comando == "REACOES"){

msg.channel.send(
`__Reações__

block - esquiva minima -1, -1 de esquiva, joga dado de fd 1d10

dodge - esquiva normal, -1 de fd, se tomar nao tem dado de fd

counter attack - in x in Sucesso: O ataque do adversário não vai ser realizado e você ataca no lugar dele. Retorna o jogo pra Iniciativa.

Falha: Recebe o ataque com os modificadores de defesa prejudicados.

parry - -2 de esquiva, ac x ac pra se tiver sucesso, ganhar um buff de fd e esquiva

dual exchange - toma o atk diretamente, se receber dano abaixo da sua Resistência nata, recebe um ataque de oportunidade pra atacar imediatamente no turno do adversário.

**—————————————————————————————————————————————————————————————————————————————————————————**

__Reações Especiais__

cross-guard - block especial, -2 de esquiva, esquiva minima -2, joga dado de fd 1d20

? - counter attack especial

deflect - parry especial (tipo um parry mais "ofensivo", que tenta jogar a coisa pra fora da direçao ativamente, enqnt o parry so tenta anular de alguma forma com redirecionamento)

predict - parry especial (funcionando com per x per no caso pra ganhar os buffs, da buff de IN)

`)

msg.channel.send(
`__Reações Especiais²__

川川***  Roll***

Cmd: Roll — Cost: 02 — Type: Special Dodge — Es: 1d20; +1d6 — Fd: -2

__Effs.:__ sucesso esqv - resultado do dado específico de 'Rolar' pode ser usado pra se movimentar (0.5m pra cada 1, como nas regras de movimentação).

confronto - ca especial te da a permissao de jogar uma tecnica contra a tecnica do oponente. as duas tecnicas jogam dano e se uma quebrar a durabilidade da outra, a outra é derrotada e a vencedora persiste na direçao do oponente. as duas podem se quebrar. durabilidade é mt influenciada por FE, assim como dano. no caso do confrontador perder ele fica ferradinho pq os mods de def dele tao reduzidos

o vencedor do confronto rouba o turno ~ reseta o turno. outra vtg de tech defensiva, o turno vai continuar rolando normal.

se as techs empatarem sem nenhuma destruir a outra os players podem renovar a tech pra tentar dnv, se um deles n quiser renovar, quem renovou vai ser "vitorioso" ja q a tech vai continuar no ar

duck - dodge especial (acho q n passa nao, mais facil ser um eff)

sway - dodge especial

frontdash - dodge especial

backdash - dodge especial

sidestep - dodge especial (passa pq faz sentido, esquivar indo pro lado do alvo pra flanquear)

操 Confront [Confront] 操

Custo: 02 MP — Tipo: Defesa Especial — Defesa: 1d20; -5 — Esquiva: 1d20; -5 — AR: +0 — Res: +0

Effs.: te da a permissao de jogar uma tecnica contra a tecnica do oponente. as duas tecnicas jogam dano e se uma quebrar a durabilidade da outra, a outra é derrotada e a vencedora persiste na direçao do oponente. as duas podem se quebrar. durabilidade é mt influenciada por FE, assim como dano. no caso do confrontador perder ele fica ferradinho pq os mods de def dele tao reduzidos

o vencedor do confronto rouba o turno ~ reseta o turno. outra vtg de tech defensiva, o turno vai continuar rolando normal.

se as techs empatarem sem nenhuma destruir a outra os players podem renovar a tech pra tentar dnv, se um deles n quiser renovar, quem renovou vai ser "vitorioso" ja q a tech vai continuar no ar

Pode ser usado junto de Aproximar ou Afastar. Joga IN + Fur - 2 x. IN + Per.

Sucesso: +1 de Vantagem de Ação pra cada 1 de Resultado Positivo. Ganha "Flanking".

**—————————————————————————————————————————————————————————————————————————————————————————**`)

}
})

rpgBot.on('message',msg=>{
let inicio_comando = msg.content.toUpperCase().split(" ")[0]
if(inicio_comando == "SISTEMA"){

msg.channel.send(
`__Atributos__

**[Vig] Vigor**: Fa +1 — Fd +1 — Res +0.5 — Rgen +0.5


**[Des] Destreza**: Ac +1.5 — Fur +1


**[Agi] Agilidade**: Sp +2 — Es +1 — In +0.5


**[Int] Intelecto**: Fe +0.5 — De +0.5 — Rcup +1.5 — Per +1


**[Car] Carisma**: Mp +5 — Fe +1.5 — Ilu +1


**[Von] Vontade**: De +1.5 — Res +1 — Rgen +1

**—————————————————————————————————————————————————————————————————————————————————————————**

__Base__

**H.P**: 100


**S.P Base**: 10


**M.P Base**: 10


**Máximo de Atributos**: 15

**—————————————————————————————————————————————————————————————————————————————————————————**

__Modificadores__

**[H.p] Health Points**: Pontos de Vida, uma pontuação que cai com o dano recebido.


**[S.p] Stamina Points**: Pontos que são gastos com o uso de ataques físicos.


**[M.p] Mana Points**: Pontos que são gastos com o uso de ataques mágicos.


**[Fa] Força de Ataque**:


**[Fd] Força de Defesa**:


**[Fe] Força Espiritual**:


**[De] Defesa Espiritual**:


**[Ac] Acerto**:


**[Es] Esquiva**:


**[In] Iniciativa**:


**[Ilu] Ilusão**:

**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`__Modificadores²__

**[Res] Resistência**:


**[Lt] Letalidade**:


**[Ar] Armadura**:


**[Pen] Penetração**:


**[Fur] Furtividade**:


**[Per] Percepção**:

**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`__Vantagens de Teste__

**[VdAce] Vantagem de Acerto**: É a diferença positiva entre seu resultado máximo de Acerto e o resultado máximo de Esquiva do oponente.


**[VdE] Vantagem de Esquiva**: É a diferença positiva entre seu resultado máximo de Esquiva e o resultado máximo de Acerto do oponente.


**[VdAcao] Vantagem de Ação**: É uma vantagem obtida através de furtividade ou da vantagem de esquiva.


**[VdI] Vantagem de Iniciativa**: É a diferença positiva entre seu valor de Iniciativa e o valor de Iniciativa do oponente.

**—————————————————————————————————————————————————————————————————————————————————————————**

__Fadiga__

**Pra cada 1- de S.p**: -1 de Rcup.


**Pra cada 3- de S.p**: -1 de In e Fa.

__Cansaço__

**1- ou menos de M.p**: -50% de Rcup. Não pode usar Técnicas.

__Machucado__

**Pra cada -10 de H.p**: -1 de Rgen.

__Repouso__

Todo personagem inicia uma luta com 5 de Repouso. Quando Repouso chega á 0, ele ativa Repousar e volta pra 5.

Toda ação ou reação feita por você te dá 1 de Repouso.

**Repousar**: Cura +Rgen de H.p, +Rcup de S.p e M.p.

__Descanso__

Não age por um turno. Perde 3 de Repouso. ||Cmd: acaoes Desc||

**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`__Críticos__

**Acerto Crítico**: Aumentam o dado base (o 1d6, 1d10, 1d20...) que foi jogado pela metade do valor máximo dele. Ou seja, se você rolou um 1d20 e critou, seu bônus é de +10 pro teste que for.

**Erro Crítico**: Abaixam o dado base (o 1d6, 1d10, 1d20...) que foi jogado pela metade do valor máximo dele. Ou seja, se você rolou um 1d20 e critou negativo, sua penalidade é de -10 pro teste que for.

**—————————————————————————————————————————————————————————————————————————————————————————**

__Rounds__

**Rodadas**: Todo conjunto de turnos de um 'time' específico. Esse 'time' pode conter uma pessoa só, ou seja, um 1v1 tem todo fim de turno como o fim de uma rodada.


**Turnos**: Conjunto de ações de um personagem específico.


**Ações**: Tudo o que você faz no seu turno é uma ação.


**Reações**: Toda resposta pra ações são reações.

**—————————————————————————————————————————————————————————————————————————————————————————**

__Desmaio__

**H.P -0 ou menos**: Um teste de Desmaio [1d20 + Rgen] é realizado depois de toda Ação que você fizer.

**[Resultado 10-] Desmaiar**:


**[Resultado 1-] Morte**:


**[Desmaiado] Tentativa de Acordar**:


**[Tentativa de Acordar, Resultado 15+] Acordar**:

**—————————————————————————————————————————————————————————————————————————————————————————**`)

msg.channel.send(
`__**Regras - Movimentação**__

Todo personagem pode decidir se mover durante o combate para se aproximar ou se afastar do oponente.

td mundo na sua range de movimentação pode escolher uma reação pra ela com uma 'reação de movimentação'. personagens só podem ter uma 'reação de movimentação' na mesma rodada (rodadas são todos os turnos de um 'time' especifico, ou seja, se é um 1x1 todo turno é uma rodada)

os metros são contados pelos players msm

~

__**Ação - Correr**__

__Custo: 2 de S.P.__

**Teste**: 1d20 + IN. Cada 1 de Resultado é meio metro percorrido.

Os dois jogam os Testes e obviamente quem tiver corrido mais, venceu. Quem tiver corrido mais pode parar á qualquer momento pra ficar na distância exata que ele quer do seu oponente.

~

__**Correr - Obstáculos**__

futuro, mas deixa localizado aqui já

alguns obstaculos podem ocorrer (ou serem jogados pelo proprio oponente). eles tem uma dificuldade base pra serem ultrapassados

pra detectar eles é int, e qqr vantagem vai ajudar no teste de agi. kd 1 de derrota pra um obstaculo te faz perder 0.5m de corrida (perder tempo)

~

__**Reação - Manter Distância**__

os 2 players jogam e qm correr mais é o 'vencedor'. a distancia lida é a que vc pode percorrer naquele turno, mas obvio q vc pode parar antes.

a distancia é medida pelo mestre msm na sessao, é interpretativo. se precisar posso fazer um cmd pra marcar ela "dist escreveoqquiser"
mas nenhum atk vai ler a distancia pq ela seria variavel dependendo do personagem q fosse atkr, mt complexo e desnecessario pro sistema`)

msg.channel.send(
`__**Regras - Movimentação, 2**__

__**Reação - Atacar no Trajeto**__

faz o turno do oponente acabar na tentativa de movimentação e vai pro seu (n ganha atk de oportunidade). tem ini pra ver qnts metros ele percorreu antes de ir pro seu turno (pode ser q ele percorra tudo kkkkk acho que se pa, se ele superar a quantia de metros q queria ou dobrar, o turno pode continuar dele e foi falha do atk no trajeto. esse pode ser o inicio da tentativa de reação, na real)

dar dano acima da resistencia faz ele parar (res ficou bom dms, n é só bom pro sistema q tá dando mt dano como finalmente deu logica pra essas partes)

* esses cmds só são usados no atk no trajeto

aprox S
afast S

afastamento causa debuff de FD (de costas mas fugindo mto pesado das coisas, oq eh relacionado a mov), aprox causa debuff de esquiva (indo de cara pra cima, reaçao mais dificil)


cmd de A e T normal joga isso pra N e n le nd de vantagem if atktrajeto = N (tem cmd de atktrajeto, ate pra definir as paradas)]

~

__**Reação - Encontro**__

os players decidem ir um na mesma direçao do outro (seja pra longe ou pra perto). os dois jogam correr, se enfrentam em IN e o vencedor tem o turno e escolhe a distancia onde pararam

~

__**Sistema - Distância**__

**[ML]** Muito Longa [10m+]: -5 de Acerto.


**[L]** Longa [2m ~ 9.9m]: -


**[C]** Curta [0.1m ~ 1m]: -


**[QM]** Queima Roupa [0m]: +5 de Acerto.

~`)

}
})

rpgBot.on('message',msg=>{
    let inicio_comando = msg.content.toUpperCase().split(" ")[0]
    if(inicio_comando == "WRITEPERICIA"){

    let meiocomando = msg.content.split(" ")[1]

    let nome_personagem = msg.content.split(" ")
    nome_personagem = nome_personagem.splice(2, 5)
    nome_personagem = nome_personagem.join(" ")

    let id_member = msg.member.id
//  db.get("usuarios").find({PericiasExpert : [nome_personagem]}).value()
    let Char = personagem_logado(id_member)
//  let periciaFind = db.get("usuarios").find({Ver.PericiasExpert : nome_personagem}).value()

    let PericiaWrite = nome_personagem

    if(meiocomando == "Expert"){
    Char.PericiasExpert = PericiaWrite
    db.write()
    }

if(meiocomando == "Expert"){
Char.PericiasExpert = PericiaWrite
db.write()
}

if(meiocomando == "Intermediario"){
Char.PericiasIntermed = PericiaWrite
db.write()
}

if(meiocomando == "Novato"){
Char.PericiasNovato = PericiaWrite
db.write()
}

msg.reply(`${Char.PericiasExpert}`)
msg.delete()

}
})

    rpgBot.on('message',msg=>{
        let inicio_comando = msg.content.toUpperCase().split(" ")[0]
        if(inicio_comando == "DELPERICIA"){

        let nome_personagem = msg.content.split(" ")
        nome_personagem = nome_personagem.splice(1, 5)
        nome_personagem = nome_personagem.join(" ")

        let id_member = msg.member.id
    //  db.get("usuarios").find({PericiasExpert : [nome_personagem]}).value()
    let Char = personagem_logado(id_member)
//  let periciaFind = db.get("usuarios").find({Ver.PericiasExpert : nome_personagem}).value()

    Char.PericiasExpert = ""
    db.write()

    msg.reply(`${Char.PericiasExpert}`)

    msg.delete()
        }
        })

rpgBot.on('message',msg=>{
    let inicio_comando = msg.content.toUpperCase().split(" ")[0]
    if(inicio_comando == "CHECKRE"){
        let id_member = msg.member.id
let ver = personagem_logado(id_member)

if(ver.PericiasExpert.includes('Investigação')){
msg.reply(`achouu`)
}

msg.reply(`*Vendo informações de **${ver.Nome}** **${ver.Clã}***

*Atributos: **${ver.Pts_Atributo}**, Ataque: **${ver.Ataque}**

__HP__:

__Inventário__: ${ver.MP} **MP**, ${ver.MS} **MS**, ${ver.MM} **MM**

__Traços__:

__Defeitos__:

__Pericias [Expert]__: ${ver.PericiasExpert}

__Pericias [Intermediário]__: ${ver.PericiasIntermed}

__Pericias [Novato]__: ${ver.PericiasNovato}`)

// files: (bota o mod no json q tá na foto)

msg.delete()
}
})

rpgBot.on('message',msg=>{
    let inicio_comando = msg.content.toUpperCase().split(" ")[0]
    if(inicio_comando == "DEX"){

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(1, 5)
nome_personagem = nome_personagem.join(" ")

let id_member = msg.member.id
let ver = pokedex.get("Pokedex").find({Especie : nome_personagem}).value()



msg.channel.send(
`**Especie**: ${ver.Especie}   **Dex**: ${ver.Dex}   **Tipo**: ${ver.Tipo}

**H.p**: ${ver.Hp}   **S.p**: ${ver.Sp}   **M.p**: ${ver.Mp}   **Rgen**: ${ver.Mp}  **Rcup**: ${ver.Sp}

**F.a**: ${ver.Fa}   **F.d**: ${ver.Fd}   **F.e**: ${ver.Fe}   **D.e**: ${ver.De}

**Ac**: ${ver.Ac}    **Es**: ${ver.Es}    **Ini**: ${ver.Ini}

**Arm**: ${ver.Arm}   **Res**: ${ver.Res}`)

// files: (bota o mod no json q tá na foto)

msg.delete()
}
})

function ConsultaFicha(nome_personagem){
    let Ficha = db.get("usuarios").find({nome : nome_personagem}).value()

    if(Ficha.ativo){
    console.log("if")
    let Ativo = db.get("Ativos").find({nome : Ficha.ativo}).value()
    console.log(Ativo)
        // db.get("usuarios").find({ nome : nome_personagem }).assign({ mp: mp_gasta}).value()
    } else {
        console.log("else")
        return Ficha
    }
}

if(Defensor.Restricao == "Dominio Vertiginoso"){

let TesteVertigem = rollDice1d20()

TesteVertigem += Defensor.Des

if(TesteVertigem < 12){

IniciativaDef = Math.floor(IniciativaDef*0.5)

AcertoDefensor = Math.floor(AcertoDefensor*0.5)

Esquiva = Math.floor(Esquiva*0.5)

msg.channel.send(`**${Defensor.Nome}** foi afetado pela mudança de direções.`)

} else {

msg.channel.send(`**${Defensor.Nome}** não foi afetado pela mudança de direções.`)

}

}

if(Atacante.Restricao == "Dominio Vertiginoso"){

let TesteVertigem = rollDice1d20()

TesteVertigem += Atacante.Des

if(TesteVertigem < 12){

IniciativaAtk = Math.floor(IniciativaAtk*0.5)

Acerto = Math.floor(Acerto*0.5)

msg.channel.send(`**${Atacante.Nome}** foi afetado pela mudança de direções.`)

} else {

msg.channel.send(`**${Atacante.Nome}** não foi afetado pela mudança de direções.`)

}

}

      "NS6.OL6": "",
      "NS6.OL5.5": "",
      "NS6.OL5": "",
      "NS6.OL4.5": "",
      "NS6.OL4": "",
      "NS6.OL3.5": "",
      "NS6.OL3": "",
      "NS6.L2.5": "",
      "NS6.OL2": "",
      "NS6.OL1.5": "",
      "NS6.OL1": "",
      "NS6.OL0": "",
      "NS6.OL-0.5": "",
      "NS6.OL-1": "",
      "NS6.OL-1.5": "",
      "NS6.OL-2": "",
      "NS6.OL-2.5": "",
      "NS6.OL-3": "",
      "NS6.OL-3.5": "",
      "NS6.OL-4": "",
      "NS6.OL-4.5": "",
      "NS6.OL-5": "",
      "NS6.OL-5.5": "",
      "NS6.OL-6": "",
      "NS5.5.OL6": "",
      "NS5.5.OL5.5": "",
      "NS5.5.OL5": "",
      "NS5.5.OL4.5": "",
      "NS5.5.OL4": "",
      "NS5.5.OL3.5": "",
      "NS5.5.OL3": "",
      "NS5.5.L2.5": "",
      "NS5.5.OL2": "",
      "NS5.5.OL1.5": "",
      "NS5.5.OL1": "",
      "NS5.5.OL0": "",
      "NS5.5.OL-0.5": "",
      "NS5.5.OL-1": "",
      "NS5.5.OL-1.5": "",
      "NS5.5.OL-2": "",
      "NS5.5.OL-2.5": "",
      "NS5.5.OL-3": "",
      "NS5.5.OL-3.5": "",
      "NS5.5.OL-4": "",
      "NS5.5.OL-4.5": "",
      "NS5.5.OL-5": "",
      "NS5.5.OL-5.5": "",
      "NS5.5.OL-6": "",
      "NS5.OL6": "",
      "NS5.OL5.5": "",
      "NS5.OL5": "",
      "NS5.OL4.5": "",
      "NS5.OL4": "",
      "NS5.OL3.5": "",
      "NS5.OL3": "",
      "NS5.L2.5": "",
      "NS5.OL2": "",
      "NS5.OL1.5": "",
      "NS5.OL1": "",
      "NS5.OL0": "",
      "NS5.OL-0.5": "",
      "NS5.OL-1": "",
      "NS5.OL-1.5": "",
      "NS5.OL-2": "",
      "NS5.OL-2.5": "",
      "NS5.OL-3": "",
      "NS5.OL-3.5": "",
      "NS5.OL-4": "",
      "NS5.OL-4.5": "",
      "NS5.OL-5": "",
      "NS5.OL-5.5": "",
      "NS5.OL-6": ""

let Fichacountdown = db.get("usuarios").find({Nome : "Ryushiro"}).value()

Fichacountdown.Countdown += 1

if(Fichacountdown.Countdown > 4 && Fichacountdown.Countdown < 6){
msg.channel.send(`> =====
> **Uma energia amaldiçoada muito poderosa pôde ser sentida no horizonte...**
> =====`)
}

if(Fichacountdown.Countdown > 19 && Fichacountdown.Countdown < 21){
msg.channel.send(`> =====
**Apesar de não enxergarem ninguém, os feiticeiros conseguem sentir uma energia amaldiçoada tão forte que a sensação é de que ela está agarrando eles.**
> =====`)
}

if(Fichacountdown.Countdown > 24 && Fichacountdown.Countdown < 26){
msg.channel.send(`> =====
**A parede do terceiro andar do nada explodiu e uma figura imponente apareceu.**

**Com quatro asas de anjo que escondem seu braço esquerdo e que não parecem poder alçar vôo, metade do rosto apagado como se tivessem passado borracha, a maldição é branca como leite, tem tamanho de humanóide e a feição de uma garota de doze anos, perceberam que...**

**... O Espírito Vingativo da Yoru, a menina que faleceu segundo os bilhetes que Midori leu, apareceu no terceiro andar. Tendo convivido com pessoas fortes durante suas vidas, Ryoshi e Kazuki perceberam que aquela maldição não poderia estar abaixo de uma de Grau 1.**
> =====`)
}

if(inicio_comando == "SH"){

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(1, 5)
nome_personagem = nome_personagem.join(" ")

let Defensor = db.get("usuarios").find({Nome: nome_personagem}).value()
let id_member = msg.member.id
let Atacante = personagem_logado(id_member)
let Tecnica = techs.get("Techs").find({Cmd : Atacante.Tech}).value()
let Effs = techs.get("Effs").value()

let DadoAcerto = Math.floor((Math.random() * Atacante.DadoN) + 1)

let Dano = Atacante.PdF

if(personagem_existe(nome_personagem) == false){

Defensor = db.get("usuarios").find({Nome : "Fy"}).value()
msg.channel.send(`Nome errado`)
let SPGasto = 0
let MPGasto = 0
Defensor.HP = 10.000
db.write()
}

let Defesa = Defensor.Res

let Dificuldade = 0
let Acerto = DadoAcerto + Atacante.Des

// Dados completos (soma do 1, 2, 3, 4, 5) \/

if(Atacante.Arma == "Pistol"){
if(Atacante.MP == 0){
msg.channel.send(`Sem munição.`)
Dano = 0
Acerto = 0
Atacante.MP = 1
}
Atacante.MP -= 1
}

if(Atacante.Arma == "Shotgun"){
if(Atacante.MS == 0){
msg.channel.send(`Sem munição.`)
Dano = 0
Acerto = 0
Atacante.MS = 1
}
Atacante.MS -= 1
}

if(Atacante.Arma == "Rifle")

if(Atacante.Arma == "Magnum"){
}

if(Atacante.Efeitos.includes("Descarregar")){

let dMult = []
let dCount = 1

let LeituraTiros = ""

while (dCount < Tecnica.C1){
dCount += 1
Dificuldade += 1
dMult["nDAce"] = Math.floor((Math.random() * Atacante.DadoN) + 1) + Atacante.Des

if(dMult["nDAce"] > Dificuldade){

Defensor.HP -= Math.ceil(dMult["nDAce"] * Dano)

msg.channel.send(`**${Atacante.Nome}** acertou o **${dCount}º Tiro** de **Descarregar!**

**${dMult["nDAce"]}** x. **${Dificuldade}** [${Atacante.PdF} de PdF] = ${dMult["nDAce"] * Dano}`)

}

// msg.reply(`${dMult["nDAce"]}`)
}

Atacante.Efeitos = ""
techs.write()

}

/* if(Atacante.Efeitos.includes("Descarregar")){

let dMult = []
let dCount = 0
while (dCount < Effs.Descarregar){
dCount += 1
Dificuldade += 1
dMult["nDAce" + dCount] = Math.floor((Math.random() * Atacante.DadoN) + 1)
msg.reply(`${dMult["nDAce1", "nDAce2", "nDAce3", "nDAce4", "nDAce5"]}`)
}
console.log(dMult)

} */

if(Atacante.Mira == "Ponto Fraco"){
Dificuldade = 15
}

if(Atacante.Mira == "Rosto"){
Dificuldade = 12
}

if(Atacante.Mira == "Corpo"){
Dificuldade = 10
}

if(Atacante.Mira == "Braço"){
Dificuldade = 7
}

if(Atacante.Mira == "Perna"){
Dificuldade = 7
}

if(DadoAcerto == Atacante.DadoN){
DadoAcerto *= 1.5
}

Acerto -= Dificuldade

if(Acerto <= 0){
Acerto = 0
}

if(DadoAcerto > 0){

Defensor.HP -= Math.ceil(DadoAcerto * Dano)

msg.channel.send(`ardao`)
} else {
msg.channel.send(`errou`)
}

techs.write()
db.write()

if(inicio_comando == "DOMVER"){

let nome_personagem = msg.content.split(" ")[1]

let nomepersonagem1st = nome_personagem.charAt(0).toUpperCase() + nome_personagem.toLowerCase().slice(1)

nome_personagem = nomepersonagem1st

let Defensor = db.get("usuarios").find({Nome : nome_personagem}).value()

let id_member = msg.member.id
let char = personagem_logado(id_member)

if(Defensor.Restricao == "Dominio Vertiginoso"){

Defensor.Restricao = ""

msg.channel.send(`**${char.Nome}** desativou **Domínio Inato - Mundo Vertiginoso**.`)
db.write()

} else {

Defensor.Restricao = "Dominio Vertiginoso"

msg.channel.send(`**${char.Nome}** colocou **${Defensor.Nome}** no seu **Domínio Inato - Mundo Vertiginoso** e virou seus sentidos ao contrário.`)
db.write()

}

}

}

if(inicio_comando == "LERTECH"){

let meiocomando = msg.content.split(" ")[1]

let meiocomando1st = meiocomando.charAt(0).toUpperCase() + meiocomando.toLowerCase().slice(1)

meiocomando = meiocomando1st

/* let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(2, 5)
nome_personagem = nome_personagem.join(" ") */

let id_member = msg.member.id
let ver = personagem_logado(id_member)
let Tecnica = techs.get("Techs").find({Cmd : meiocomando}).value()

if(Tecnica.Tipo.includes("Ofensivo")){

msg.channel.send(
`**Nome:** ${Tecnica.Nome}                 **Cmd**: ${Tecnica.Cmd}

**Tipo:** ${Tecnica.Tipo}                      **Alcance**: ${Tecnica.Alcance}

**Dano**: ${Tecnica.DanoQ}d${Tecnica.DanoN}    **Acerto**: ${Tecnica.AcertoQ}d${Tecnica.AcertoN}

**Efeitos**: ${Tecnica.Efeitos}`)

}

}

let AtaqueForte = DadoFA * 1.5

AtaqueForte = Math.ceil(AtaqueForte)

TesteDano += AtaqueForte

if(EfeitosDef.includes("Mugen")){

Tecnica = techs.get("Techs").find({Nome : Mugen}).value()

if(Tecnica.MugenCheck == "N"){

let tInAtk = IniciativaAtk + rollDice1d20() - 8

let tInDef = IniciativaDef + rollDice1d20()

if(tInAtk > tInDef){

DadoFD = 0

Esquiva -= 1

GuardaFurada = "S"

GuardaFuradaRead = `**${Atacante.Nome}** ultrapassou o **Mugen** antes de ser levantado.

Furo de Guarda: **${tInAtk}** x. **${tInDef}**`

}

if(tInDef >= tInAtk){

DadoFD = rollDice1d12()

Esquiva -= 1

}

}

if(Tecnica.MugenCheck == "S"){

Defensor.Reacao = "Mugen"

Res += 10000

GuardaRead = `**${Atacante.Nome}** foi barrado pelo **Mugen**.`

}

}

if(Atacante.Ativacao == "Manipulacao de Energia Amaldiçoada"){

let Manipu = Atacante.FE - 3

if(Atacante.Vtg.includes("Maestria em Controle de Energia (1)")){

Manipu += 1

}

if(Atacante.Vtg.includes("Maestria em Controle de Energia (2)")){

Manipu += 1

}

let ManipuDef = Defensor.DE

let ManipuDano = Manipu - ManipuDef

if(Manipu > ManipuDef){

Dano += ManipuDano

}

}

if(Atacante.AtkMult > 0){

AtaqueSP += 1

}

if(Atacante.BlessedBySparks == "S"){

// mais facil de acertar black flash, mais fe, acaba qnd dá fim de turno

// abençoado pelos raios

}

if(char.Vtg.includes("Vigor Avançado (1)")){

let VigorAvancadoHP = Math.ceil(char.Max_HP*0.15)

let VigorAvancadoRG = 1

char.Max_HP += VigorAvancadoHP

char.HP += VigorAvancadoHP

char.RG += VigorAvancadoRG

db.write()

}

if(char.Vtg.includes("Vigor Avançado (2)")){

let VigorAvancadoHP = Math.ceil(char.Max_HP*0.30)

let VigorAvancadoRG = 2

char.Max_HP += VigorAvancadoHP

char.HP += VigorAvancadoHP

char.RG += VigorAvancadoRG

db.write()

}

if(char.Vtg.includes("Vigor Avançado (3)")){

let VigorAvancadoHP = Math.ceil(char.Max_HP*0.45)

let VigorAvancadoRG = 3

char.Max_HP += VigorAvancadoHP

char.HP += VigorAvancadoHP

char.RG += VigorAvancadoRG

db.write()

}

  "Descricoes": {
    "PoderExc": "**[1 ~ 5] Poder Excessivo** - +4 de F.E, mas suas Técnicas custam +1 de M.P mínimo por Nível (a Expertise em Controle não pode reduzir abaixo do mínimo).",
    "Cans": "**[Efeito] Cansativo** - Precisa repousar por uma quantia de vezes antes de poder agir de novo.",
    "RL": "**[Efeito] Recuo Lento** - Multiplica a Vantagem de Esquiva que seu adversário obteve sobre você."
  },
  "Effs": {
    "Descarregar": "."
  },

  "Check In": [
    {
      "Nome": "",
      "Ordem": 0
    },
    {
      "Nome": "",
      "Ordem": 1
    },
    {
      "Nome": "",
      "Ordem": 2
    },
    {
      "Nome": "",
      "Ordem": 3
    },
    {
      "Nome": "",
      "Ordem": 4
    },
    {
      "Nome": "",
      "Ordem": 5
    },
    {
      "Nome": "",
      "Ordem": 6
    },
    {
      "Nome": "",
      "Ordem": 7
    },
    {
      "Nome": "",
      "Ordem": 8
    },
    {
      "Nome": "",
      "Ordem": 9
    },
    {
      "Nome": "",
      "Ordem": 10
    }

if(InCheck.Um == 0){

InCheck.Um = InOrder
InCheck.Nome1 = Char.Nome

techs.write()

} else if (InCheck.Um > 0){

InCheck.Dois = InOrder
InCheck.Nome2 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0){

InCheck.Tres = InOrder
InCheck.Nome3 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0){

InCheck.Quatro = InOrder
InCheck.Nome4 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro){

InCheck.Cinco = InOrder
InCheck.Nome5 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro && InCheck.Cinco){

InCheck.Seis = InOrder
InCheck.Nome6 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro && InCheck.Cinco && InCheck.Seis){

InCheck.Sete = InOrder
InCheck.Nome7 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro && InCheck.Cinco && InCheck.Seis && InCheck.Sete){

InCheck.Oito = InOrder
InCheck.Nome8 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro && InCheck.Cinco && InCheck.Seis && InCheck.Sete && InCheck.Oito){

InCheck.Nove = InOrder
InCheck.Nome9 = Char.Nome

techs.write()

} else if(InCheck.Um > 0 && InCheck.Dois > 0 && InCheck.Tres > 0 && InCheck.Quatro && InCheck.Cinco && InCheck.Seis && InCheck.Sete && InCheck.Oito && InCheck.Nove){

InCheck.Dez = InOrder
InCheck.Nome10 = Char.Nome

techs.write()

}


let NumeroSorteado = Sort1

if(NumeroSorteado == InCheck.Um){

InCheck.Um = InCheck.Um
InCheck.Nome1 = InCheck.Nome1

} else if(NumeroSorteado == InCheck.Dois){

InCheck.Um = InCheck.Dois
InCheck.Nome1 = InCheck.Nome2

} else if(NumeroSorteado == InCheck.Tres){

InCheck.Um = InCheck.Tres
InCheck.Nome1 = InCheck.Nome3

} else if(NumeroSorteado == InCheck.Quatro){

InCheck.Um = InCheck.Quatro
InCheck.Nome1 = InCheck.Nome4

} else if(NumeroSorteado == InCheck.Cinco){

InCheck.Um = InCheck.Cinco
InCheck.Nome1 = InCheck.Nome5

} else if(NumeroSorteado == InCheck.Seis){

InCheck.Um = InCheck.Seis
InCheck.Nome1 = InCheck.Nome6

} else if(NumeroSorteado == InCheck.Sete){

InCheck.Um = InCheck.Sete
InCheck.Nome1 = InCheck.Nome7

} else if(NumeroSorteado == InCheck.Oito){

InCheck.Um = InCheck.Oito
InCheck.Nome1 = InCheck.Nome8

} else if(NumeroSorteado == InCheck.Nove){

InCheck.Um = InCheck.Nove
InCheck.Nome1 = InCheck.Nome9

} else if(NumeroSorteado == InCheck.Dez){

InCheck.Um = InCheck.Dez
InCheck.Nome1 = InCheck.Nome10

}

let Sort2 = Math.max(InCheck.Dois, InCheck.Tres, InCheck.Quatro, InCheck.Cinco, InCheck.Seis, InCheck.Sete, InCheck.Oito, InCheck.Nove, InCheck.Dez)

NumeroSorteado = Sort2

if(NumeroSorteado == InCheck.Um){

InCheck.Dois = InCheck.Um
InCheck.Nome2 = InCheck.Nome1

} else if(NumeroSorteado == InCheck.Dois){

InCheck.Dois = InCheck.Dois
InCheck.Nome2 = InCheck.Nome2

} else if(NumeroSorteado == InCheck.Tres){

InCheck.Dois = InCheck.Tres
InCheck.Nome2 = InCheck.Nome3

} else if(NumeroSorteado == InCheck.Quatro){

InCheck.Dois = InCheck.Quatro
InCheck.Nome2 = InCheck.Nome4

} else if(NumeroSorteado == InCheck.Cinco){

InCheck.Dois = InCheck.Cinco
InCheck.Nome2 = InCheck.Nome5

} else if(NumeroSorteado == InCheck.Seis){

InCheck.Dois = InCheck.Seis
InCheck.Nome2 = InCheck.Nome6

} else if(NumeroSorteado == InCheck.Sete){

InCheck.Dois = InCheck.Sete
InCheck.Nome2 = InCheck.Nome7

} else if(NumeroSorteado == InCheck.Oito){

InCheck.Dois = InCheck.Oito
InCheck.Nome2 = InCheck.Nome8

} else if(NumeroSorteado == InCheck.Nove){

InCheck.Dois = InCheck.Nove
InCheck.Nome2 = InCheck.Nome9

} else if(NumeroSorteado == InCheck.Dez){

InCheck.Dois = InCheck.Dez
InCheck.Nome2 = InCheck.Nome10

}

  ]let NomeSorteado = ""

let Nome1 = InCheck.Nome1

let Nome2 = InCheck.Nome2

let Nome3 = InCheck.Nome3

let Nome4 = InCheck.Nome4

let Nome5 = InCheck.Nome5

let Nome6 = InCheck.Nome6

let Nome7 = InCheck.Nome7

let Nome8 = InCheck.Nome8

let Nome9 = InCheck.Nome9

let Nome10 = InCheck.Nome10

if(Sort1 )

let InCheck = techs.get("Techs").find({Nome : "CheckIn" }).value()

let Sort1 = Math.max(InCheck.Sort1, InCheck.Sort2, InCheck.Sort3, InCheck.Sort4, InCheck.Sort5, InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Um = Sort1

let Sort2 = Math.max(InCheck.Sort2, InCheck.Sort3, InCheck.Sort4, InCheck.Sort5, InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Dois = Sort2

let Sort3 = Math.max(InCheck.Sort3, InCheck.Sort4, InCheck.Sort5, InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Tres = Sort3

let Sort4 = Math.max(InCheck.Sort4, InCheck.Sort5, InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Quatro = Sort4

let Sort5 = Math.max(InCheck.Sort5, InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Cinco = Sort5

let Sort6 = Math.max(InCheck.Sort6, InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Seis = Sort6

let Sort7 = Math.max(InCheck.Sort7, InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Sete = Sort7

let Sort8 = Math.max(InCheck.Sort8, InCheck.Sort9, InCheck.Sort10)

InCheck.Oito = Sort8

let Sort9 = Math.max(InCheck.Sort9, InCheck.Sort10)

InCheck.Nove = Sort9

// COMO FAZER: o sort1 vai sortear todos os nomes e jogar o mais alto pro incheck.um. o sort2 vai sortear tds menos o 1 e jogar pro .um, vai ser até o sort9

// um modificador de "numero sorteado" e "nome sorteado" vai ser feito e um if q vai pegar if(talnumerosorteado){nomesorteado = tal nome}, dai vai jogar o nome pro nome1

if(char.Efeitos.includes("Mugen Ativando")){

const Replacemugen2 = char.Efeitos.replace("Mugen Ativando - ", "")
char.Efeitos = Replacemugen2

}

if(meiocomando == "Mugen" && !char.Efeitos.includes("Mugen Ativo")){

Tecnica.Ativo = "S"
char.Efeitos = "Mugen Ativando - "

// msg.channel.send({
// files: [
// './pics/limitless8.png'
// ]
// })

}

if(char.Efeitos.includes("Mugen Ativo")){

const Replacemugen1 = char.Efeitos.replace("Mugen Ativo - ", "")
char.Efeitos = Replacemugen1

}

if(tecDef.Efeitos.includes("Invulneravel")){

Defesa += 1000

}

,
    {
      "Foto": "S",
      "Nome": "Mugen",
      "Cmd": "Mugen",
      "Tipo": "Ativacao",
      "Alcance": "Medio",
      "Custo": 4,
      "DanoQuant": 2,
      "DanoNumb": 12,
      "Vel": 2,
      "VelProf": 0.34,
      "VelFe": 0,
      "VelAs": 0,
      "Potencia": 0,
      "Tamanho": 0,
      "Area": 0,
      "Precisao": 0,
      "Durabilidade": 0,
      "Efeitos": "Energizar",
      "Energizar": 2,
      "FA": 0,
      "FE": 0,
      "C1": 6,
      "C2": 1,
      "FD": 0,
      "DE": 0,
      "AC": 0,
      "ES": 0,
      "DanoTotal": 0,
      "DanoRead": "",
      "Ativo": "N",
      "MugenCheck": "N"
    },

if(nome_personagem == null || nome_personagem == undefined){


}

msg.channel.send(`**${Atacante.Nomeread}** acertou com a **Técnica de Proporção** e ganhou: +**${Ratio}** de Dano.`, {
files: [
'./pics/Ratio.png'
]
})

rpgBot.on('message',msg=>{
let inicio_comando = msg.content.toUpperCase().split(" ")[0]
if(inicio_comando == "DESC"){

let nome_personagem = msg.content.split(" ")
nome_personagem = nome_personagem.splice(1, 5)
nome_personagem = nome_personagem.join(" ")

let id_member = msg.member.id
let AcharDesc = techs.get("Descricoes").value()
let ver = nome_personagem
let Descricao = ""

let hpnegativo = 90

let teste = 15

let contagem = 1

while(teste < hpnegativo){
teste += 15
contagem += 1
if(teste > hpnegativo){
teste = hpnegativo
contagem -= 1
}
}

if(ver == "Poder Excessivo"){
Descricao = AcharDesc.PoderExc
}

if(ver == "Cansativo"){
Descricao = AcharDesc.Cans
}

if(ver == "Recuo Lento"){
Descricao = AcharDesc.RL
}

msg.reply(`${Descricao}

${teste} ${contagem}`)

msg.delete()
}
})

if(inicio_comando == "MANIPU"){

    let id_member = msg.member.id
    let char = personagem_logado(id_member)

if(char.Ativacao == "Manipulacao de Energia Amaldiçoada"){

char.Ativacao = ""

msg.channel.send(`**${char.Nome}** desativou **Manipulação de Energia Amaldiçoada**.`)
db.write()

} else {

char.Ativacao = "Manipulacao de Energia Amaldiçoada"
db.write()

msg.channel.send(`**${char.Nome}** ativou **Manipulação de Energia Amaldiçoada**.

> Nível: Novato.

> +F.E (-3) x. D.E em Ataques. Cada 1 em Maestria em Controle de Energia dá +1 pra ataques.`)}

}

if(Atacante.AcaoEsp.includes("Simultaneo") && !Defensor.Efeitos.includes("Recebendo Ataque em Conjunto")){

AtkPA += 1

Defensor.Efeitos = "Recebendo Ataque em Conjunto, "

const Simultaneoconjunto = Atacante.AcaoEsp.replace("Simultaneo -, ", "")
Atacante.AcaoEsp = Simultaneoconjunto

}

if(Defensor.Efeitos.includes("Recebendo Ataque em Conjunto" && Atacante.AcaoEsp.includes("Simultaneo"))){

AtkPA += 1

let SimultaneoBuff = rollDice1d10()

SimultaneoRead = `
> Ataque Simultâneo: **+${SimultaneoBuff}**
`

IniciativaAtk += SimultaneoBuff

const Recebendoconjunto = Defensor.Efeitos.replace("Recebendo Ataque em Conjunto, ", "")
Defensor.Efeitos = Recebendoconjunto

}

if(nome_personagem == "Con"){

let ConjuntoClash = rollDice1d10()

msg.reply(`**${char.Nome}** vai usar **Ação Conjunta**.

Os dois rodam 1d10. O maior resultado determina o valor e então esse valor é reduzido pela diferença de resultado entre dois (max. 10, min. 0).

Aquele que tirar o menor resultado é quem vai usar o Ataque Simultâneo. Se empatar, os jogadores podem escolher. Se for feito em três, são os dois menores resultados.

Resultado: **${ConjuntoClash}**`)
msg.delete()
db.write()
}

if(Atacante.PA <= 0 && Atacante.Efeitos.includes("Intruso de Turno")){

msg.reply(`**${Atacante.Nome}** não tem mais Pontos de Ação. Ele não pode agir no turno de outros e seu próximo turno vai ser encerrado automaticamente.`)

}

if(Atacante.PA <= 0 && Atacante.AcaoEsp.includes("Simultaneo")){

const Intrreplace = Atacante.Efeitos.replace("Intruso de Turno, ", "")
Atacante.Efeitos = Intrreplace

}

if(Atacante.PA > 0 && Atacante.AcaoEsp.includes("Simultaneo")){

const Intrreplace = Atacante.Efeitos.replace("Intruso de Turno, ", "")
Atacante.Efeitos = Intrreplace

}

let TurnosLista = techs.get("Techs").find({Nome : "CheckIn" }).value()


// if(TurnosLista.TurnoAtualNome !== Atacante.Nome){

// Não acabar o turno da pessoa se outro jogar "dentro" do turno dela

// UmPorVez = "S"

// }

if(TurnosLista.TurnoAtual == "Um" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Dois"
TurnosLista.TurnoAtualNome = TurnosLista.DoisNome
TurnosLista.ProxTurno = "Tres"
TurnosLista.ProxTurnoNome = TurnosLista.TresNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Dois" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Tres"
TurnosLista.TurnoAtualNome = TurnosLista.TresNome
TurnosLista.ProxTurno = "Quatro"
TurnosLista.ProxTurnoNome = TurnosLista.QuatroNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Tres" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Quatro"
TurnosLista.TurnoAtualNome = TurnosLista.QuatroNome
TurnosLista.ProxTurno = "Cinco"
TurnosLista.ProxTurnoNome = TurnosLista.CincoNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Quatro" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Cinco"
TurnosLista.TurnoAtualNome = TurnosLista.CincoNome
TurnosLista.ProxTurno = "Seis"
TurnosLista.ProxTurnoNome = TurnosLista.SeisNome

UmPorVez = "S"

}

if(TurnosLista.TurnoAtual == "Cinco" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Seis"
TurnosLista.TurnoAtualNome = TurnosLista.SeisNome
TurnosLista.ProxTurno = "Sete"
TurnosLista.ProxTurnoNome = TurnosLista.SeteNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Seis" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Sete"
TurnosLista.TurnoAtualNome = TurnosLista.SeteNome
TurnosLista.ProxTurno = "Oito"
TurnosLista.ProxTurnoNome = TurnosLista.OitoNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Sete" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Oito"
TurnosLista.TurnoAtualNome = TurnosLista.OitoNome
TurnosLista.ProxTurno = "Nove"
TurnosLista.ProxTurnoNome = TurnosLista.NoveNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Oito" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Nove"
TurnosLista.TurnoAtualNome = TurnosLista.NoveNome
TurnosLista.ProxTurno = "Dez"
TurnosLista.ProxTurnoNome = TurnosLista.DezNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Nove" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Dez"
TurnosLista.TurnoAtualNome = TurnosLista.DezNome
TurnosLista.ProxTurno = "Um"
TurnosLista.ProxTurnoNome = TurnosLista.UmNome

UmPorVez = "S"

techs.write()

}

if(TurnosLista.TurnoAtual == "Dez" && UmPorVez == "N"){

TurnosLista.TurnoAtual = "Um"
TurnosLista.TurnoAtualNome = TurnosLista.UmNome
TurnosLista.ProxTurno = "Dois"
TurnosLista.ProxTurnoNome = TurnosLista.DezNome

UmPorVez = "S"

techs.write()

}

if(TesteAcerto < 0){

VantagemEsquiva = TesteAcerto

VantagemEsquiva -= VantagemEsquiva * 2

if(VantagemEsquiva > 5){

VantagemEsquiva = 5

}

if(GuardaFurada == "N" && tecDef.Efeitos.includes("Invulneravel")){

VantagemEsquiva = 0

}

}

let TenPlena = Tenacidade*2
let TenNata = TenBuff + Tenacidade

// Tenacidade
if(Defensor.FA >= 0){
if(TesteDano <= TenPlena){

DanopreRes = TesteDano

let ReducaoRes = TesteDano * 0.5

ReducaoRes = Math.floor(ReducaoRes)

TesteDano = ReducaoRes

}

if(TesteDano > TenPlena){

DanopreRes = TesteDano

TesteDano -= TenNata

}
}

// let HpPercent = Math.floor(Defensor.HP / Defensor.Max_HP * 100)

// let TesteIncapacitado = rollDice1d20()

// let ReducaoIncapacitado = 0

// let Incapacitar = 0

// let Machucado = 100 - HpPercent

// if(Machucado < 20){

// ReducaoIncapacitado = 20 - Machucado

// Incapacitar -= ReducaoIncapacitado

// Machucado = 20 só deve passar essa leitura do cap de 80% pra regeneração, o machucado deve ser lido até 100% normalmente

// }

// let ReducTol = Math.floor(Machucado * 0.25)

// TenBuff -= ReducTol

// if(TenBuff < 0){

// Tolerancia = 0

// }

// let ReducRegen = "" // acho q vai tar no cmd de mudança de turnos msm

// let SpPercentAtk = Math.floor(Atacante.SP / Atacante.Max_SP * 100)

// let SpPercentDef = Math.floor(Defensor.SP / Defensor.Max_SP * 100)

// let FadigadoAtk = 100 - SpPercentAtk

// let FadigadoDef = 100 - SpPercentDef

// let ReducInAtk = Math.floor(FadigadoAtk * 0.05)

// let ReducInDef = Math.floor(FadigadoDef * 0.05)

// IniciativaAtk -= ReducInAtk

// IniciativaDef -= ReducInDef

// let MpPercent = Defensor.MP / Defensor.Max_MP * 100

// let Esgotado = 100 - MpPercent

/// talvez no futuro, esses mods aqui debaixo com rolls deveriam ser só mods com valor 0 pra ter um modificador especifico pra CA e aparar e os rolls serem um 3 dado dentro do scoop de CA
// recuo tá assim aliás /\

if(char.SP <= char.Max_SP*0.5 && char.SP >= char.Max_SP*0.25 && !char.Cond.includes("Levemente Cansado")){

char.Cond += "Levemente Cansado"

}

if(char.SP <= char.Max_SP*0.25 && char.SP >= 0 && !char.Cond.includes("Cansado")){

const Cansadoreplace = char.Efeitos.replace("Levemente Cansado", "Cansado")
char.Cond = Cansadoreplace

}

if(char.SP <= 0 && !char.Cond.includes("Esgotado")){

const Esgotadoreplace = char.Efeitos.replace("Cansado", "Esgotado")
char.Cond = Esgotadoreplace

}

ReducAR = Armadura / 1000 * 100

TesteDano *= MultiplAcerto

// A redução vai pegar o valor em % do dano de letalidade. Se deu 100 e é pra reduzir em 75%, então o valor da letalidade redução é pra ser 75

// Aqui o valor do dano de letalidade foi multiplicado por 0.? (esse ? é o valor de armadura da pessoa) que é obtido através do ReducAR, isso vai ser reduzido pro valor exato da porcentagem

// Desse jeito ele vai valer os 75% do 100 (75) pois foi multiplicado por 0.75 ao invés de 0.25 (que seria o que falta pra fechar 100%)

// E aí é só subtrair o valor inteiro pelo de 75% pra termos 25

let LetalidadeReducao = DanoLetalidade

Math.floor(TesteDano)

LetalidadeReducao *= ReducAR

DanoLetalidade -= Math.floor(LetalidadeReducao)

    {
      "Nome": "CheckIn",
      "TurnoAtual": "Dez",
      "ProxTurno": "Um",
      "Um": 23,
      "UmNome": "Ryoshi",
      "Dois": 20,
      "DoisNome": "Finger Bearer",
      "Tres": 17,
      "TresNome": "Ryuji",
      "Quatro": 7,
      "QuatroNome": "Blackdog",
      "Cinco": 6,
      "CincoNome": "Kazuki",
      "Seis": 18,
      "SeisNome": "Ryushiro",
      "Sete": 18,
      "SeteNome": "Semi-Grau 1",
      "Oito": 18,
      "OitoNome": "",
      "Nove": 18,
      "NoveNome": "",
      "Dez": 18,
      "DezNome": "",
      "Onze": 18,
      "OnzeNome": "Ryushiro",
      "Doze": 18,
      "DozeNome": "Ryushiro",
      "Treze": 18,
      "TrezeNome": "Ryushiro",
      "Quatorze": 0,
      "QuatorzeNome": "",
      "Quinze": 0,
      "QuinzeNome": "",
      "UltimoTurno": "Marin"
    },

if(inicio_comando == "IMPACTO"){

  // muda sua dist na hr

let id_member = msg.member.id
let char = personagem_logado(id_member)

let Tecnica = techs.get("Techs").find({Nome : "Impacto"}).value()

let meiocomando = msg.content.split(" ")[1]

let meiocomando1st = meiocomando.charAt(0).toUpperCase() + meiocomando.toLowerCase().slice(1)

meiocomando = meiocomando1st

meiocomando = parseInt(meiocomando)

Tecnica.ValorImpacto = meiocomando

msg.channel.send(`**Impacto** tá com **${Tecnica.ValorImpacto}** de Valor.`)
msg.delete()

techs.write()
db.write()

}

let Tolerancia = 20

let HpPercent = Math.floor(ver.HP / ver.Max_HP * 100)

let Machucado = 100 - HpPercent

let ReducTol = Math.floor(Machucado * 0.25)

Tolerancia -= ReducTol

let SpPercent = Math.floor(ver.SP / ver.Max_SP * 100)

let Fadigado = 100 - SpPercent

let ReducIn = Math.floor(Fadigado * 0.05)

let MpPercent = ver.MP / ver.Max_MP * 100

let Esgotado = 100 - MpPercent

if(Atacante.Impacto == 0 && Impacto >= 5 && !Defensor.Efeitos.includes("Ajoelhado")){

Defensor.Efeitos += "Ajoelhado - "

}

AtaqueMP += tecAtk.Fortalecer*tecAtk.MPFortalecer

let Fortalecer = rollDice(tecAtk.Fortalecer, tecAtk.DanoNumb*tecAtk.Fortalecer)

if(char.Efeitos.includes("Revestimento Iniciante")){

const Newefeitos = char.Efeitos.replace("Revestimento Iniciante", "")

char.Efeitos = Newefeitos

msg.channel.send(`**${char.Nome}** desativou **Revestimento de Energia Amaldiçoada - Iniciante**.`)
db.write()

} else {

char.Efeitos += "Revestimento Iniciante"

db.write()

msg.channel.send(`**${char.Nome}** ativou **Revestimento de Energia Amaldiçoada - Iniciante**.`)}

}
if(inicio_comando == "MODREVEST"){

    let id_member = msg.member.id
    let char = personagem_logado(id_member)

if(char.Efeitos.includes("Revestimento Moderado")){

const Newefeitos = char.Efeitos.replace("Revestimento Moderado", "")

char.Efeitos = Newefeitos

msg.channel.send(`**${char.Nome}** desativou **Revestimento de Energia Amaldiçoada - Moderado**.`)
db.write()

} else {

char.Efeitos += "Revestimento Moderado"

db.write()

msg.channel.send(`**${char.Nome}** ativou **Revestimento de Energia Amaldiçoada - Moderado**.`)}

}
if(inicio_comando == "REVEST"){

    let id_member = msg.member.id
    let char = personagem_logado(id_member)

if(char.Efeitos.includes("Revestimento Perfeito")){

const Newefeitos = char.Efeitos.replace("Revestimento Perfeito", "")

char.Efeitos = Newefeitos

msg.channel.send(`**${char.Nome}** desativou **Revestimento de Energia Amaldiçoada - Perfeito**.`)
db.write()

} else {

char.Efeitos += "Revestimento Perfeito"

db.write()

msg.channel.send(`**${char.Nome}** ativou **Revestimento de Energia Amaldiçoada - Perfeito**.`)}

}

if(Atacante.Efeitos.includes("Ratio") && TabelaOrdem >= 3 && TesteAcerto >= 0){

TecnicaAtk = techs.get("Techs").find({Nome : "Técnica de Proporção"}).value()

let DanoRatio = rollDice(tecAtk.DanoQuant, tecAtk.DanoQuant*tecAtk.DanoNumb)

let DadoDefRatio = rollDice1d8()

let DadoRatio = DanoRatio + Atacante.FE

let DefRatio = Defensor.Res + DadoDefRatio

let Ratio = DadoRatio - DefRatio

if(Ratio < 0){
Ratio = 0
}

Dano += Ratio

msg.channel.send(`**${Atacante.Nomeread}** acertou com a **Técnica de Proporção** e ganhou: +**${Ratio}** de Dano.`)

// Precisa resetar o efeito pois a Tech também reseta, talvez levar isso pro trigger de tecnicas momentaneas / de incremento no futuro

const Ratioreplace = Atacante.Efeitos.replace("Ratio - ", "")
Atacante.Efeitos = Ratioreplace

}

if(char.Efeitos.includes("Ratio")){

const Ratioreplace = char.Efeitos.replace("Ratio - ", "")
char.Efeitos = Ratioreplace
meiocomando = ""

}

if(meiocomando == "Ratio" && !char.Efeitos.includes("Ratio")){

char.Efeitos += "Ratio - "

// msg.channel.send({
// files: [
// './pics/limitless8.png'
// ]
// })

}

if(inicio_comando == "SORT"){

let nome_personagem = msg.content.split(" ")[1]

let id_member = msg.member.id
let Char = personagem_logado(id_member)

// Os players jogam as Ins e ganham valores individuais, aí eles atribuem manualmente na ordem

// Talvez seja só automatizar a parte da ordem com um sort entre os valores individuais dos players e daí atribui os nomes

// No futuro vou tentar automatizar só essa etapa daqui (a de cima não)

let InCheck = techs.get("Techs").find({Nome : "CheckIn" }).value()

if(nome_personagem == "1"){

InCheck.Um = Char.InSort
InCheck.UmNome = Char.Nomeread
InCheck.TurnoAtual = "Um"
InCheck.TurnoAtualNome = InCheck.UmNome

techs.write()

}

if(nome_personagem == "2"){

InCheck.Dois = Char.InSort
InCheck.DoisNome = Char.Nomeread

techs.write()

}

if(nome_personagem == "3"){

InCheck.Tres = Char.InSort
InCheck.TresNome = Char.Nomeread

}

if(nome_personagem == "4"){

InCheck.Quatro = Char.InSort
InCheck.QuatroNome = Char.Nomeread

}

if(nome_personagem == "5"){

InCheck.Cinco = Char.InSort
InCheck.CincoNome = Char.Nomeread

}

if(nome_personagem == "6"){

InCheck.Seis = Char.InSort
InCheck.SeisNome = Char.Nomeread

}

if(nome_personagem == "7"){

InCheck.Sete = Char.InSort
InCheck.SeteNome = Char.Nomeread

}

if(nome_personagem == "8"){

InCheck.Oito = Char.InSort
InCheck.OitoNome = Char.Nomeread

}

if(nome_personagem == "9"){

InCheck.Nove = Char.InSort
InCheck.NoveNome = Char.Nomeread

}

if(nome_personagem == "10"){

InCheck.Dez = Char.InSort
InCheck.DezNome = Char.Nomeread

}

techs.write()

}

if(msg.content.split(" ")[3]){

let personagem3 = msg.content.split(" ")[3]
let personagem3st = personagem3.charAt(0).toUpperCase() + personagem3.toLowerCase().slice(1)
personagem3 = personagem3st

let Alvo = db.get("usuarios").find({Nome : personagem3}).value()

let Metros = Math.abs(Atacante.NS - Coordenada)

let TesteReacao = Atacante.IN - Metros - Alvo.IN

if(ReagirMov.Oportunismo == "N" && ReagirMov.ManterDistancia == "N"){

if(Atacante.NS <= Alvo.NS){

Atacante.NS = Coordenada + 1

}

if(Atacante.NS >= Alvo.NS){

Atacante.NS = Coordenada - 1

}

msg.channel.send(`oie`)

}

if(ReagirMov.Oportunismo == "N" && ReagirMov.ManterDistancia == "S"){

if(TesteReacao >= 1){

}

if(TesteReacao <= 0){

}

}

if(ReagirMov.Oportunismo == "S" && ReagirMov.ManterDistancia == "N"){

if(TesteReacao >= 1){

}

if(TesteReacao <= 0){

}

}

}

if(ReagirMov.Oportunismo == "N" && ReagirMov.ManterDistancia == "S"){

if(TesteReacao >= 1){

if(TesteReacao >= TesteMov){

TesteMov = 0

}

TesteMov -= TesteReacao

}

if(TesteReacao <= 0){

}

}

if(ReagirMov.Oportunismo == "S" && ReagirMov.ManterDistancia == "N"){

if(TesteReacao >= 1){

}

if(TesteReacao <= 0){

}

}

if(tecAtk.Nome == "Azul: Deslocacao Instantanea" || tecDef.Nome == "Azul: Deslocacao Instantanea"){msg.channel.send({
files: [
'./pics/teleportblue.gif'
]
})}

if(NomeAtual == "Azul: Atração"){msg.channel.send({
files: [
'./pics/blue10.gif'
]
})}

if(tecAtk.Cmd == "Arremene"){

msg.channel.send({
files: [
'./pics/cursedthrow.png'
]
})
}

if(Defensor.Reacao == "Aparar" && ApararDef > 0 && TesteAcerto < 2 && Letalidade > 0 && GuardaFurada == "N"){

TesteAcerto = 2

}

let LetalidadeBuff = Math.floor(Letalidade * 1.5)

Letalidade += LetalidadeBuff


if(Atacante.Nome == "Kuroi"){

let DanoGarganta = 8 - TabelaOrdem

GGRoucaKuroi.Garganta += DanoGarganta

GargantaDanificada = GGRoucaKuroi.Garganta

}

if(Atacante.Nome == "Midori"){

let DanoGarganta = 8 - TabelaOrdem

GGRoucaMidori.Garganta += DanoGarganta

GargantaDanificada = GGRoucaMidori.Garganta

}

if(msg.content.split(" ")[2]){

let personagem2 = msg.content.split(" ")[2]
let personagem2st = personagem2.charAt(0).toUpperCase() + personagem2.toLowerCase().slice(1)
personagem2 = personagem2st

let Alvo = db.get("usuarios").find({Nome : personagem2}).value()

if(Atacante.NS <= Alvo.NS){

Atacante.NS = Coordenada + 1

}

if(Atacante.NS >= Alvo.NS){

Atacante.NS = Coordenada - 1

}

}

if(nome_personagem == "QR"){

Char.Distancia = "Queima Roupa"

db.write()

}

if(nome_personagem == "CD"){

Char.Distancia = "Curta"

db.write()

}

if(nome_personagem == "LD"){

Char.Distancia = "Longa"

db.write()

}

      "Efeitos": "Indesviavel, Retardar",
      "Indesviavel": 1,
      "Retardar": 2,


if(Atacante.Efeitos.includes("Refinamento de Manipulação de Sangue") && Atacante.Tech == "Piercingblood"){

let BuffRefinamento = rollDice(Atacante.Prof, Atacante.Prof*2)

if(Atacante.AtkOport == "S"){

TipoDano = "Concussão"
AtkArmado = "S"

}

if(Atacante.AtkOport == "N"){



}

const Effreplace = Atacante.Efeitos.replace("Refinamento de Manipulação de Sangue", "")
char.Efeitos = Effreplace

}

if(TabelaOrdem == 7 || TesteDano >= 55){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 6 || (TesteDano >= 45 && TesteDano <= 54)){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 5 || (TesteDano >= 30 && TesteDano <= 44)){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 4 || (TesteDano >= 20 && TesteDano <= 29)){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 3 || (TesteDano >= 15 && TesteDano <= 19)){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 2 || (TesteDano >= 10 && TesteDano <= 14)){

Defensor.Efeitos += "Breve Pausa"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Breve Pausa**.`)

}

if(TabelaOrdem == 1 || (TesteDano >= 5 && TesteDano <= 9)){

Defensor.Efeitos += "Breve Pausa"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Breve Pausa**.`)

}

if(TabelaOrdem == 0 || (TesteDano >= 0 && TesteDano <= 4)){

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra não teve efeito.`)

}

if(TabelaOrdem == 7){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 6){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 5){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 4){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 3){

Defensor.Efeitos += "Parado"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Parado**.`)

}

if(TabelaOrdem == 2){

Defensor.Efeitos += "Breve Pausa"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Breve Pausa**.`)

}

if(TabelaOrdem == 1){

Defensor.Efeitos += "Breve Pausa"

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra causou **Breve Pausa**.`)

}

if(TabelaOrdem == 0){

TesteDano = 0
DanoCausado = 0

msg.channel.send(`A palavra não teve efeito.`)

}

let AtaqueRapido = rollDice1d6()

IniciativaAtk += AtaqueRapido

Acerto -= 1

let DebuffDano = Math.floor(Atacante.FA*0.5)

Dano -= DebuffDano

if(char.Vtg.includes("Maestria em Armas (1)")){

char.PerArmas += 1

db.write()

}

if(char.Vtg.includes("Maestria em Armas (2)")){

char.PerArmas += 2

db.write()

}

if(char.Vtg.includes("Maestria em Conjuração (1)")){

char.PerCon += 1

db.write()

}

if(char.Vtg.includes("Maestria em Conjuração (2)")){

char.PerCon += 2

db.write()

}

if(char.Vtg.includes("Maestria em Corpo a Corpo (1)")){

char.PerCorpo += 1

db.write()

}

if(char.Vtg.includes("Maestria em Corpo a Corpo (2)")){

char.PerCorpo += 2

db.write()

}

if(Atacante.SP <= Atacante.Max_SP*0.5 && Atacante.SP >= Atacante.Max_SP*0.25){

IniciativaAtk -= 2

Dano -= 2

}

if(Atacante.SP <= Atacante.Max_SP*0.25 && Atacante.SP >= 0){

IniciativaAtk -= 5

Dano -= 3

}

if(Atacante.SP <= 0){

IniciativaAtk -= 10

Dano -= 6

}

if(Defensor.SP <= Defensor.Max_SP*0.5 && Defensor.SP >= Defensor.Max_SP*0.25){

IniciativaDef -= 2

}

if(Defensor.SP <= Defensor.Max_SP*0.25 && Defensor.SP >= 0){

IniciativaDef -= 5

Defesa -= 1

}

if(Defensor.SP <= 0){

IniciativaDef -= 10

Defesa -= 3

}


if(tecAtk.Tipo.includes("Fisico") && Atacante.Vtg.includes("Força Imensa (1)")){

// && Atacante.tipodeataque = "Queima Roupa" || atacante.tipodeataque = "Curta Distancia"

Dano += 2

FFAtk += 1

}

if(tecAtk.Tipo.includes("Fisico") && Atacante.Vtg.includes("Força Imensa (2)")){

// && Atacante.tipodeataque = "Queima Roupa" || atacante.tipodeataque = "Curta Distancia"

Dano += 4

FFAtk += 2

}

if(tecAtk.Tipo.includes("Fisico") && Atacante.Vtg.includes("Força Imensa (3)")){

// && Atacante.tipodeataque = "Queima Roupa" || atacante.tipodeataque = "Curta Distancia"

Dano += 6

FFAtk += 3

}

if(ver.Nomeread == "Midori"){

GGRoucaRead = `Garganta Rouca**: ${GGRoucaMidori.Garganta}.**`

}

if(ver.Nomeread == "Kuroi"){

GGRoucaRead = `Garganta Rouca**: ${GGRoucaKuroi.Garganta}.**`

}

if(ver.SP <= ver.Max_SP*0.50){

Exaustao = `**${ver.Nome}** está Levemente Cansado.`

}

if(Defensor.Reacao == "Esquiva Incomum"){

DefesaSP += 1

DefPA += 1

EsquivaIncomum = rollDice1d4()

Esquiva += EsquivaIncomum

}

if(CoordQEstava <= 9 && CoordQPara <= 9){

CoordQEstava = EfeitoMov.slice(14, 15)

CoordQPara = EfeitoMov.slice(17, 18)

}

if(CoordQEstava <= 9 && CoordQPara >= 9){

CoordQEstava = EfeitoMov.slice(14, 15)

CoordQPara = EfeitoMov.slice(17, 20)

}

if(CoordQEstava >= 10 && CoordQPara <= 9){

CoordQEstava = EfeitoMov.slice(14, 16)

CoordQPara = EfeitoMov.slice(18, 19)

}

CoordQEstava = parseInt(CoordQEstava)

CoordQPara = parseInt(CoordQPara)

if(TabelaOrdem >= 2 && TipoDano == "Concussao"){

let Tecnica = techs.get("Techs").find({Nome : "Buffs"}).value()

let DanoImpacto = FFAtk + Math.floor(TesteDano*0.2)

let ResImpacto = rollDice1d20() + Tenacidade

let Impacto = DanoImpacto - ResImpacto

let Atordoamento = 0

Tecnica.ValorImpacto = Impacto

if(Impacto < 0){

Impacto = -1

}

if(Impacto >= 0){

Atordoamento = Impacto

if(Atordoamento >= 2 && Atordoamento <= 4){

Atordoamento = 1

}

if(Atordoamento >= 5){

Atordoamento = 2

}

Defensor.PA -= Atordoamento

if(Impacto > Atacante.Impacto){

Impacto = Atacante.Impacto

}

if(Atacante.NS > Defensor.NS){

Defensor.NS -= Impacto

}

if(Atacante.NS < Defensor.NS){

Defensor.NS += Impacto

}

msg.channel.send(`**${Defensor.Nome}** tomou **${Impacto}** de Impacto.

Teste**:** ${Tenacidade} + **${ResImpacto - Tenacidade}** x. ${DanoImpacto}

Impacto**: ${ImpactoFinal}**. Atordoamento**: ${Atordoamento}**. Coordenada do Impactado**: ${Defensor.NS}**.`)

}

}

if(TabelaOrdem >= 2 && tecAtk.TipoDano.includes("Concussao") && tecAtk.Tipo.includes("Fisico")){

let Tecnica = techs.get("Techs").find({Nome : "Buffs"}).value()

let DanoImpacto = FFAtk + Math.floor(TesteDano*0.2)

let ResImpacto = rollDice1d20() + Tenacidade

let Impacto = DanoImpacto - ResImpacto

let Atordoamento = 0

// Atribui pra um valor temporário em um Json o quanto a pessoa foi Impactada. Melhor do que encher a ficha dos personagens

Tecnica.ValorImpacto = Impacto

if(Impacto < 0){

Impacto = -1

}

if(Impacto >= 0){

Atordoamento = Impacto

if(Atordoamento >= 2 && Atordoamento <= 4){

Atordoamento = 1

}

if(Atordoamento >= 5){

Atordoamento = 2

}

Defensor.PA -= Atordoamento

if(Impacto > Atacante.Impacto){

Impacto = Atacante.Impacto

}

if(Atacante.NS > Defensor.NS){

Defensor.NS -= Impacto

}

if(Atacante.NS < Defensor.NS){

Defensor.NS += Impacto

}

msg.channel.send(`**${Defensor.Nome}** tomou **${Impacto}** de Impacto.

Teste**:** ${Tenacidade} + **${ResImpacto - Tenacidade}** x. ${DanoImpacto}

Impacto**: ${ImpactoFinal}**. Atordoamento**: ${Atordoamento}**. Coordenada do Impactado**: ${Defensor.NS}**.`)

}

}

if(TabelaOrdem >= 2 && tecAtk.TipoDano.includes("Concussao") && tecAtk.Tipo.includes("Magico")){

let Tecnica = techs.get("Techs").find({Nome : "Buffs"}).value()

let DanoImpacto = FFAtk + Math.floor(TesteDano*0.2)

let ResImpacto = rollDice1d20() + Tenacidade

let Impacto = DanoImpacto - ResImpacto

let Atordoamento = 0

// Atribui pra um valor temporário em um Json o quanto a pessoa foi Impactada. Melhor do que encher a ficha dos personagens

Tecnica.ValorImpacto = Impacto

if(Impacto < 0){

Impacto = -1

}

if(Impacto >= 0){

Atordoamento = Impacto

if(Atordoamento >= 2 && Atordoamento <= 4){

Atordoamento = 1

}

if(Atordoamento >= 5){

Atordoamento = 2

}

Defensor.PA -= Atordoamento

if(Impacto > Atacante.Impacto){

Impacto = Atacante.Impacto

}

if(Atacante.NS > Defensor.NS && (!tecAtk.Afastar && !tecAtk.Atrair)){

Defensor.NS -= Impacto

}

if(Atacante.NS < Defensor.NS && (!tecAtk.Afastar && !tecAtk.Atrair)){

Defensor.NS += Impacto

}

if(Atacante.NS > Defensor.NS && tecAtk.Afastar == "S"){

Defensor.NS -= Impacto

}

if(Atacante.NS > Defensor.NS && tecAtk.Atrair == "S"){

Defensor.NS += Impacto

}

if(Atacante.NS < Defensor.NS && tecAtk.Afastar == "S"){

Defensor.NS += Impacto

}

if(Atacante.NS < Defensor.NS && tecAtk.Atrair == "S"){

Defensor.NS -= Impacto

}

msg.channel.send(`**${Defensor.Nome}** tomou **${Impacto}** de Impacto.

Teste**:** ${Tenacidade} + **${ResImpacto - Tenacidade}** x. ${DanoImpacto}

Impacto**: ${ImpactoFinal}**. Atordoamento**: ${Atordoamento}**. Coordenada do Impactado**: ${Defensor.NS}**.`)

}

}

if(inicio_comando == "IMPACTO"){

  // muda sua dist na hr

let id_member = msg.member.id
let char = personagem_logado(id_member)

let meiocomando = msg.content.split(" ")[1]

let meiocomando1st = meiocomando.charAt(0).toUpperCase() + meiocomando.toLowerCase().slice(1)

meiocomando = meiocomando1st
meiocomando = parseInt(meiocomando)

char.Impacto = meiocomando

msg.channel.send(`**Impacto** tá com **${char.Impacto}** de Valor.`)
msg.delete()

techs.write()
db.write()

}


if(meiocomando == "Atra"){

Tecnica.Afastar = "N"

Tecnica.Atrair = "S"

techs.write()

}

if(meiocomando == "Afas"){

Tecnica.Afastar = "S"
Tecnica.Atrair = "N"

techs.write()
}

if(tecAtk.Tipo.includes("Ofensivo")){

AtaqueMP += tecAtk.Custo

let MPReducaoAtk = AtaqueMP

let Reducao = 1 - (char.Prof*0.05 + char.PerCon*0.05)

if(Reducao <= 0.30){

Reducao = 0.30

}

MPReducaoAtk *= Reducao
MPReducaoAtk = Math.ceil(MPReducaoAtk)

Atacante.MP -= MPReducaoAtk

if(tecAtk.Efeitos.includes("Custo Vital")){

Atacante.HP -= tecAtk.CustoHP

}

}

if(Defensor.Efeitos.includes("Campo de Flores")){

let CampoAS = rollDice1d10() + Atacante.AS

let CampoCar = rollDice1d10() + Defensor.Car

let TesteCampo = CampoCar - CampoAS

if(TesteCampo < 0){

TesteCampo = 0

}

Defensor.PA -= TesteCampo

Defensor.Iniciacao -= TesteCampo

msg.channel.send(`**${Atacante.Nome}** encarou o **Campo de Flores** e perdeu; **${TesteCampo}** de Iniciação e Pontos de Ação.`)

}

if(char.SP <= char.Max_SP*0.25 && char.SP >= 0){

RecuperarPA -= 1

}

if(char.SP <= 0){

RecuperarPA -= 2

}

if(char.PA <= 0 && Tecnica.Tipo.includes("Ativacao")){

char.AtkMult = 0

let MPAtiv = ``
let SPAtiv = ``
let HPAtiv = ``
let PAAtiv = ``

let RegenRead = ``

let HPRegen = 0

let MPRegen = 0

let SPRegen = 0

let MPReducao = char.MP_Ativacao
let SPReducao = char.SP_Ativacao
let HPReducao = char.HP_Ativacao
let PAReducao = char.PA_Ativacao

if(char.Efeitos.includes("Revestimento Comum")){

MPReducao += 1 + Math.floor(char.MP*0.02)

}

if(char.Efeitos.includes("Revestimento Avançado")){

MPReducao += 2 + Math.floor(char.MP*0.03)

}

if(char.Efeitos.includes("Revestimento Excessivo")){

MPReducao += 5 + Math.floor(char.MP*0.05)

}

let Reducao = 1 - (char.Prof*0.05 + char.PerCon*0.05)

if(Reducao <= 0.30){

Reducao = 0.30

}

MPReducao *= Reducao
MPReducao = Math.ceil(MPReducao)

if(char.Efeitos.includes("Cura Constante da Reversão")){

char.TRG += char.Prof*0.25

HPRegen += rollDice(1*char.FE, 4*char.FE)

}

if(char.Efeitos.includes("Sangramento")){

let CortarSangr = char.Efeitos.substring(char.Efeitos.indexOf("Sangramento"), 18)

let SliceSangramento = CortarSangr.slice(13, 15)

if(SliceSangramento.includes("]")){

SliceSangramento = CortarSangr.slice(13, 14)

}

parseInt(SliceSangramento)

console.log(SliceSangramento)

HPRegen -= SliceSangramento

}

if(char.Efeitos.includes("Sangue se tornando Energia")){

char.TRM += char.Prof*0.25

MPRegen += rollDice(1*char.FE, 4*char.FE)

}

if(char.Efeitos.includes("Circular Sangue")){

char.TRG += char.Prof*0.25

char.TRC += char.Prof*0.25

SPRegen += rollDice(1*char.FE, 2*char.FE)

HPRegen += rollDice(1*char.FE, 4*char.FE)

}

if(char.Efeitos.includes("Sucção do Broto")){

MPReducao += 2
SPReducao += 1

}

let FraseReducaoHP = "gastou"

if(HPReducao <= 0){

FraseReducaoHP = "ganhou"

}

char.HP -= HPReducao
char.SP -= SPReducao
char.MP -= MPReducao
char.PA -= PAReducao

char.TRG += 1.5
char.TRC += 1.5
char.TRM += 1.5

if(char.HP < char.Max_HP*0.50 && char.Vtg.includes("Persistente (1)")){

HPRegen += 1

}

if(PAReducao > 0){

PAAtiv = `
**${char.Nomeread}** gastou **${PAReducao}** de PA com Ativações.
`

}

if(PAReducao < 0){

PAAtiv = `
**${char.Nomeread}** recuperou **${Math.abs(PAReducao)}** de PA com Ativações.
`

}

if(HPReducao > 0){

HPAtiv = `
**${char.Nomeread}** ${FraseReducaoHP} **${Math.abs(HPReducao)}** de HP com Ativações.
`

}

if(MPReducao > 0){

MPAtiv = `
**${char.Nomeread}** gastou **${MPReducao}** de MP com Ativações.
`

}

if(SPReducao > 0){

SPAtiv = `
**${char.Nomeread}** gastou **${SPReducao}** de SP com Ativações.
`

}

let RecuperarPA = 4

if(char.Efeitos.includes("Restricao Celestial")){

// RecuperarPA += 2

}

if(char.Nome == "Kenzo" && char.TRM >= 5){

let Rika = db.get("usuarios").find({Nomeread : "Rika"}).value()

Rika.MP -= 50
Kenzo.MP += 50

msg.channel.send(`**Rika** entregou 50 de MP pra **Kenzo**.

MP da Rika: **${Rika.MP}**.`)

}

if(char.TRG >= 5){

char.TRG -= 5

HPRegen += rollDice1d6() + char.RG

char.HP += HPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.HP > char.Max_HP){

char.HP = char.Max_HP

}

}

if(char.TRC >= 5){

char.TRC -= 5

SPRegen += rollDice1d4() + Math.floor(char.RC*0.5)

char.SP += SPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.SP > char.Max_SP){

char.SP = char.Max_SP

}

}

if(char.TRM >= 5){

char.TRM -= 5

MPRegen += rollDice1d6()

char.MP += MPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.MP > char.Max_MP){

char.MP = char.Max_MP

}

}

let ParalisiaPorVez = "N"

if(char.Efeitos.includes("Paralisia [3]" && ParalisiaPorVez == "N")){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [3] - ", "Paralisia [2] - ")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(char.Efeitos.includes("Paralisia [2]" && ParalisiaPorVez == "N")){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [2] - ", "Paralisia [1] - ")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(char.Efeitos.includes("Paralisia [1]") && ParalisiaPorVez == "N"){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [1] - ", "")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(RecuperarPA <= 0){

RecuperarPA = 1

}

char.PA += RecuperarPA

if(char.PA > char.MaxPA){

char.PA = char.MaxPA

db.write()

}

if(char.PA < char.MinPA) {

char.PA = char.MinPA

db.write()

}

msg.channel.send(`**${char.Nome}** teve seu turno encerrado.

**${char.Nome}** tem **${char.PA}** Pontos de Ação restando.
${HPAtiv}${SPAtiv}${MPAtiv}${PAAtiv}${RegenRead}`)


db.write()
techs.write()

}

if(char.PA <= 0 && !Tecnica.Tipo.includes("Defensivo")){

char.AtkMult = 0

let MPAtiv = ``
let SPAtiv = ``
let HPAtiv = ``
let PAAtiv = ``

let RegenRead = ``

let HPRegen = 0

let MPRegen = 0

let SPRegen = 0

let MPReducao = char.MP_Ativacao
let SPReducao = char.SP_Ativacao
let HPReducao = char.HP_Ativacao
let PAReducao = char.PA_Ativacao

if(char.Efeitos.includes("Revestimento Comum")){

MPReducao += 1 + Math.floor(char.MP*0.02)

}

if(char.Efeitos.includes("Revestimento Avançado")){

MPReducao += 2 + Math.floor(char.MP*0.03)

}

if(char.Efeitos.includes("Revestimento Excessivo")){

MPReducao += 5 + Math.floor(char.MP*0.05)

}

let Reducao = 1 - (char.Prof*0.05 + char.PerCon*0.05)

if(Reducao <= 0.30){

Reducao = 0.30

}

MPReducao *= Reducao
MPReducao = Math.ceil(MPReducao)

if(char.Efeitos.includes("Cura Constante da Reversão")){

char.TRG += char.Prof*0.25

HPRegen += rollDice(1*char.FE, 4*char.FE)

}

if(char.Efeitos.includes("Sangramento")){

let CortarSangr = char.Efeitos.substring(char.Efeitos.indexOf("Sangramento"), 18)

let SliceSangramento = CortarSangr.slice(13, 15)

if(SliceSangramento.includes("]")){

SliceSangramento = CortarSangr.slice(13, 14)

}

parseInt(SliceSangramento)

console.log(SliceSangramento)

HPRegen -= SliceSangramento

}

let FraseReducaoHP = "gastou"

if(HPReducao <= 0){

FraseReducaoHP = "ganhou"

}

char.HP -= HPReducao
char.SP -= SPReducao
char.MP -= MPReducao
char.PA -= PAReducao

char.TRG += 1.5
char.TRC += 1.5
char.TRM += 1.5

if(char.HP < char.Max_HP*0.50 && char.Vtg.includes("Persistente (1)")){

HPRegen += 1

}

if(PAReducao > 0){

PAAtiv = `
**${char.Nomeread}** gastou **${PAReducao}** de PA com Ativações.
`

}

if(PAReducao < 0){

PAAtiv = `
**${char.Nomeread}** recuperou **${Math.abs(PAReducao)}** de PA com Ativações.
`

}

if(HPReducao > 0){

HPAtiv = `
**${char.Nomeread}** ${FraseReducaoHP} **${Math.abs(HPReducao)}** de HP com Ativações.
`

}

if(MPReducao > 0){

MPAtiv = `
**${char.Nomeread}** gastou **${MPReducao}** de MP com Ativações.
`

}

if(SPReducao > 0){

SPAtiv = `
**${char.Nomeread}** gastou **${SPReducao}** de SP com Ativações.
`

}

let RecuperarPA = 4

if(char.Efeitos.includes("Restricao Celestial")){

// RecuperarPA += 2

}

if(char.Nome == "Kenzo" && char.TRM >= 5){

let Rika = db.get("usuarios").find({Nomeread : "Rika"}).value()

Rika.MP -= 50
Kenzo.MP += 50

msg.channel.send(`**Rika** entregou 50 de MP pra **Kenzo**.

MP da Rika: **${Rika.MP}**.`)

}

if(char.TRG >= 5){

char.TRG -= 5

HPRegen += rollDice1d6() + char.RG

char.HP += HPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.HP > char.Max_HP){

char.HP = char.Max_HP

}

}

if(char.TRC >= 5){

char.TRC -= 5

SPRegen += rollDice1d4() + Math.floor(char.RC*0.5)

char.SP += SPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.SP > char.Max_SP){

char.SP = char.Max_SP

}

}

if(char.TRM >= 5){

char.TRM -= 5

MPRegen += rollDice1d6()

char.MP += MPRegen

RegenRead = `
**${char.Nome}** recuperou **${HPRegen}** de Vida, **${MPRegen}** de Mana e **${SPRegen}** de Stamina.
`

if(char.MP > char.Max_MP){

char.MP = char.Max_MP

}

}

let ParalisiaPorVez = "N"

if(char.Efeitos.includes("Paralisia [3]" && ParalisiaPorVez == "N")){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [3] - ", "Paralisia [2] - ")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(char.Efeitos.includes("Paralisia [2]" && ParalisiaPorVez == "N")){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [2] - ", "Paralisia [1] - ")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(char.Efeitos.includes("Paralisia [1]") && ParalisiaPorVez == "N"){

const ParalisiaReplace = char.Efeitos.replace("Paralisia [1] - ", "")
char.Efeitos = ParalisiaReplace

ParalisiaPorVez = "S"

char.PA -= 1

db.write()

}

if(RecuperarPA <= 0){

RecuperarPA = 1

}

char.PA += RecuperarPA

if(char.PA > char.MaxPA){

char.PA = char.MaxPA

db.write()

}

if(char.PA < char.MinPA) {

char.PA = char.MinPA

db.write()

}

msg.channel.send(`**${char.Nome}** teve seu turno encerrado.

**${char.Nome}** tem **${char.PA}** Pontos de Ação restando.
${HPAtiv}${SPAtiv}${MPAtiv}${RegenRead}`)


db.write()
techs.write()

}